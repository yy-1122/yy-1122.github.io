<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux命令</title>
      <link href="2021/01/29/linux-ming-ling/"/>
      <url>2021/01/29/linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>关于Linux系统一些常用命令的简介</p><p><img src="https://i.loli.net/2021/01/24/AUmbSC7N6HyJ2WX.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分支预测</title>
      <link href="2021/01/29/fen-zhi-yu-ce/"/>
      <url>2021/01/29/fen-zhi-yu-ce/</url>
      
        <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#%E4%B8%80-%E4%BB%80%E4%B9%88%E6%98%AF%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B">一、什么是分支预测</a></li><li><a href="#%E4%BA%8C-%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E7%9A%84%E4%BD%BF%E7%94%A8">二、分支预测的使用</a></li></ul><!-- tocstop --><h1><span id="一-什么是分支预测">一、什么是分支预测</span></h1><p>CPU 在遇到 if 分支结构发语句时是怎么处理的呢？</p><p>我们想象一下，假如你遇到了一个分叉路口，而此时你并不知道目的地在哪个方向，你会怎么做呢？</p><p>很显然，你只能随机选择一条路继续前进，如果你猜对了，那么恭喜你。但是如果你猜错了呢，毫无疑问，你只能沿路返回路口，再选择另一条路，CPU在遇到 if 语句是也是如此。</p><p><img src="https://i.loli.net/2021/01/29/GdwKUNnMhIAB47b.jpg"></p><p>如果CPU总是猜错，那么程序的执行效率明显会有所降低，那有没有一种办法能够提高CPU猜中的可能性呢？</p><p>这就是 if 语句的分支预测。</p><h1><span id="二-分支预测的使用">二、分支预测的使用</span></h1><p>Linux系统中，定义了两个宏，在linux/compiler中，如下。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define likely(x)    __builtin_expect(!!(x), 1)        &#x2F;&#x2F; 表示x的值为真的可能性更大#define unlikely(x)  __builtin_expect(!!(x), 0)        &#x2F;&#x2F; 表示x的值为假的可能性更大<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也就是说，使用 likely() 后执行 if 后面的代码机会更大，使用 unlikely 后执行 else 后面的代码机会更大。</p><p>我们可以客观分析一下 if 语句的条件是否是经常成立的，如果这个条件确实是经常成立，或者是不成立，那么就可以使用这两个宏定义来提高程序运行的效率。</p><p>__builtin_expect 是 gcc 的内建宏，可以直接用，不加头文件。</p><p>参考下面两段代码：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main() &#123;    int x &#x3D; 0;    for (int i &#x3D; 0; ; i++) &#123;        if (x &lt; 200000000) x++;        else &#123;            break;        &#125;    &#125;    printf(&quot;OK\n&quot;);    return 0;&#125;运行结果：$ time .&#x2F;mytestOK.&#x2F;mytest  0.72s user 0.00s system 99% cpu 0.725 total<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main() &#123;    int x &#x3D; 0;    for (int i &#x3D; 0; ; i++) &#123;        if (__builtin_expect(!!(x &lt; 200000000), 1)) &#123;            x++;        &#125; else &#123;            break;        &#125;    &#125;    printf(&quot;OK\n&quot;);    return 0;&#125;运行结果：    $ time .&#x2F;mytestOK.&#x2F;mytest  0.59s user 0.00s system 99% cpu 0.597 total<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> C语言编程技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/29/hello-world/"/>
      <url>2021/01/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3><span id="run-server">Run server</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3><span id="generate-static-files">Generate static files</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
