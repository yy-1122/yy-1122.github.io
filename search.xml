<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>合并果子题目和Huffman编码的关系</title>
      <link href="2021/03/04/he-bing-guo-zi-ti-mu-he-huffman-bian-ma-de-guan-xi/"/>
      <url>2021/03/04/he-bing-guo-zi-ti-mu-he-huffman-bian-ma-de-guan-xi/</url>
      
        <content type="html"><![CDATA[<h1><span id="合并果子题目和huffman编码的关系">合并果子题目和Huffman编码的关系</span></h1><h2><span id="一-合并果子">一、合并果子</span></h2><h4><span id="题目描述">题目描述</span></h4><p> 在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。</p><p> 每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过 n−1 次合并之后，就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。</p><p> 因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为 1，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。</p><p> 例如有 33种果子，数目依次为 1，2，9。可以先将 1、2堆合并，新堆数目为 3，耗费体力为 3。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 12，耗费体力为 12。所以多多总共耗费体力为 3+12=15。可以证明 15为最小的体力耗费值。</p><hr><h4><span id="输入">输入</span></h4><p> 输入包括两行，第一行是一个整数n(1≤n≤10000)，表示果子的种类数。</p><p> 第二行包含 n个整数，用空格分隔，第 i个整数 a[i](1≤a[i]≤20000) 是第 ii种果子的数目。</p><h4><span id="输出">输出</span></h4><p> 输出包括一行，这一行只包含一个整数，也就是最小的体力耗费值。输入数据保证这个值小于 2^{31}</p><h2><span id="二-题目分析">二、题目分析</span></h2><p>我们需要得到最小消耗的体力，首先，设两个果子堆重量为 a, b，合并体力为sum = 0，</p><p>第一次合并：</p><p>sum += (a + b)，生成的新果子堆重量为 c 。</p><p>第二次合并：</p><p>再设一个新的果子堆重量为d，</p><p>sum += (c + d)</p><p>最终的体力消耗为：</p><p>sum = (a + b) + (c + d) = 2 * a + 2 * b + d</p><p>最终我们需要合并成一个果子堆，显然，我们已经先合并的果子堆的重量会被再次合并，参加更多次的计算。</p><p>果子堆合并的次数是固定的，每个果子堆至少会被合并一次，如果想要消耗更少的体力，那么我们必须也要找到重量更小的果子堆参加更多次合并。</p><p>此时我们就可以推导出解题方案：</p><p>每次从剩余的果子堆中，找到重量最小的两个果子堆进行合并。</p><h2><span id="三-合并果子与huffman编码的关系分析">三、合并果子与Huffman编码的关系分析</span></h2><p>Huffman编码，是最优的变长编码</p><ol><li><p>首先，统计得到每一种字符的概率</p></li><li><p>将 n 个字符，建立成一棵哈弗曼树<br> (1) 根据给定的n个权值{w1, w2, w3 … wn }，构造n棵只有根节点的二叉树，令起权值为wi<br> (2) 在森林中选取两棵根节点权值最小的树作为左右子树，构造一颗新的二叉树，置新二叉树根节点权值为其左右子树根节点权值之和。注意，左子树的权值应小于右子树的权值。<br> (3) 从森林中删除这两棵树，同时将新得到的二叉树加入森林中。（换句话说，之前的2棵最小的根节点已经被合并成一个新的结点了）<br> (4) 重复上述两步，直到只含一棵树为止，这棵树即是 哈弗曼树</p></li><li><p>每一个字符，都落在叶子结点上</p></li><li><p>按照左0，右1的形式，将编码读取出来</p></li></ol><p>我们将合并果子和Huffman编码联系起来</p><p>将合并果子堆消耗的体力视为Huffman树的节点权值，就可以发现其实解题思路和Huffman树的构造过程一模一样，我们不妨尝试一下。</p><p>(1) 根据给定的n个果子堆{w1, w2, w3 … wn }，构造n棵只有根节点的二叉树，令其消耗的体力为wi<br>(2) 在森林中选取两棵根节点消耗体力最小的树作为左右子树，构造一颗新的二叉树，置新二叉树根节点消耗体力为其左右子树根节点消耗体力之和。注意，左子树的消耗体力应小于右子树的消耗体力。<br>(3) 从森林中删除这两棵树，同时将新得到的二叉树加入森林中。（换句话说，之前的2棵最小的根节点已经被合并成一个新的结点了）<br>(4) 重复上述两步，直到只含一棵树为止</p><p>最终我们消耗的体力其实就是根节点的权值</p><h2><span id="四-代码">四、代码</span></h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;合并果子#include &lt;iostream&gt;                                                                                        #include &lt;algorithm&gt;                     #include &lt;queue&gt;                         #include &lt;vector&gt;                        using namespace std;                     #define MAX_N 10000                      struct Cmp &#123;                                 public:                                      bool operator()(int a, int b) &#123;                                                        return a &gt; b;                        &#125;                                &#125;;                                       int n;                                   priority_queue&lt;int, vector&lt;int&gt;, Cmp&gt; que;                                         int main() &#123;                                 cin &gt;&gt; n;                                for (int i &#x3D; 0, tmp; i &lt; n; i++) &#123;                                                     cin &gt;&gt; tmp;                              que.push(tmp);                       &#125;                                        int sum &#x3D; 0;                             for (int i &#x3D; 1, a, b; i &lt; n; i++) &#123;                                                    a &#x3D; que.top();                           que.pop();                               b &#x3D; que.top();                           que.pop();                               que.push(a + b);                         sum +&#x3D; (a + b);                      &#125;                                        cout &lt;&lt; sum &lt;&lt; endl;                     return 0;                            &#125;              <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>string类</title>
      <link href="2021/03/04/string-lei/"/>
      <url>2021/03/04/string-lei/</url>
      
        <content type="html"><![CDATA[<h1><span id="string类">string类</span></h1><h2><span id="一-介绍">一、介绍</span></h2><p>string 类是 <a href="http://c.biancheng.net/stl/">STL</a> 中 basic_string 模板实例化得到的模板类。其定义如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef basic_string &lt;char&gt; string;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="二-方法">二、方法</span></h2><h3><span id="1-构造函数">1. 构造函数</span></h3><p>string 类有多个构造函数，用法示例如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s1();  &#x2F;&#x2F; si &#x3D; &quot;&quot;string s2(&quot;Hello&quot;);  &#x2F;&#x2F; s2 &#x3D; &quot;Hello&quot;string s3(4, &#39;K&#39;);  &#x2F;&#x2F; s3 &#x3D; &quot;KKKK&quot;string s4(&quot;12345&quot;, 1, 3);  &#x2F;&#x2F;s4 &#x3D; &quot;234&quot;，即 &quot;12345&quot; 的从下标 1 开始，长度为 3 的子串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-对-string-对象赋值">2. 对 string 对象赋值</span></h3><p>可以用 char* 类型的变量、常量，以及 char 类型的变量、常量对 string 对象进行赋值。例如：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s1;s1 &#x3D; &quot;Hello&quot;;  &#x2F;&#x2F; s1 &#x3D; &quot;Hello&quot;s2 &#x3D; &#39;K&#39;;  &#x2F;&#x2F; s2 &#x3D; &quot;K”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>string 类还有 assign 成员函数，可以用来对 string 对象赋值。assign 成员函数返回对象自身的引用。例如：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s1(&quot;12345&quot;), s2;s3.assign(s1);  &#x2F;&#x2F; s3 &#x3D; s1s2.assign(s1, 1, 2);  &#x2F;&#x2F; s2 &#x3D; &quot;23&quot;，即 s1 的子串(1, 2)s2.assign(4, &#39;K&#39;);  &#x2F;&#x2F; s2 &#x3D; &quot;KKKK&quot;s2.assign(&quot;abcde&quot;, 2, 3);  &#x2F;&#x2F; s2 &#x3D; &quot;cde&quot;，即 &quot;abcde&quot; 的子串(2, 3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3-求字符串的长度">3. 求字符串的长度</span></h3><p>length 成员函数返回字符串的长度。size 成员函数可以实现同样的功能。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s;int length1 &#x3D; s.length();int length2 &#x3D; s.size();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="4-string对象中字符串的连接">4. string对象中字符串的连接</span></h3><p>除了可以使用<code>+</code>和<code>+=</code>运算符对 string 对象执行字符串的连接操作外，string 类还有 append 成员函数，可以用来向字符串后面添加内容。append 成员函数返回对象自身的引用。例如：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s1(&quot;123&quot;), s2(&quot;abc&quot;);s1.append(s2);  &#x2F;&#x2F; s1 &#x3D; &quot;123abc&quot;s1.append(s2, 1, 2);  &#x2F;&#x2F; s1 &#x3D; &quot;123abcbc&quot;s1.append(3, &#39;K&#39;);  &#x2F;&#x2F; s1 &#x3D; &quot;123abcbcKKK&quot;s1.append(&quot;ABCDE&quot;, 2, 3);  &#x2F;&#x2F; s1 &#x3D; &quot;123abcbcKKKCDE&quot;，添加 &quot;ABCDE&quot; 的子串(2, 3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="5-string对象的比较">5. string对象的比较</span></h3><p>除了可以用 &lt;、&lt;=、==、!=、&gt;=、&gt; 运算符比较 string 对象外，string 类还有 compare 成员函数，可用于比较字符串。compare 成员函数有以下返回值：</p><ul><li><p>小于 0 表示当前的字符串小；</p></li><li><p>等于 0 表示两个字符串相等；</p></li><li><p>大于 0 表示另一个字符串小。</p><p>例如：</p></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s1(&quot;hello&quot;), s2(&quot;hello, world&quot;);int n &#x3D; s1.compare(s2);n &#x3D; s1.compare(1, 2, s2, 0, 3);  &#x2F;&#x2F;比较s1的子串 (1,2) 和s2的子串 (0,3)n &#x3D; s1.compare(0, 2, s2);  &#x2F;&#x2F; 比较s1的子串 (0,2) 和 s2n &#x3D; s1.compare(&quot;Hello&quot;);n &#x3D; s1.compare(1, 2, &quot;Hello&quot;);  &#x2F;&#x2F;比较 s1 的子串(1,2)和&quot;Hello”n &#x3D; s1.compare(1, 2, &quot;Hello&quot;, 1, 2);  &#x2F;&#x2F;比较 s1 的子串(1,2)和 &quot;Hello&quot; 的子串(1,2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="6-求-string-对象的子串">6. 求 string 对象的子串</span></h3><p>substr 成员函数可以用于求子串 (n, m)，原型如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string substr(int n &#x3D; 0, int m &#x3D; string::npos) const;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调用时，如果省略 m 或 m 超过了字符串的长度，则求出来的子串就是从下标 n 开始一直到字符串结束的部分。例如：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s1 &#x3D; &quot;this is ok&quot;;string s2 &#x3D; s1.substr(2, 4);  &#x2F;&#x2F; s2 &#x3D; &quot;is i&quot;s2 &#x3D; s1.substr(2);  &#x2F;&#x2F; s2 &#x3D; &quot;is is ok&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="7-交换两个string对象的内容">7. 交换两个string对象的内容</span></h3><p>swap 成员函数可以交换两个 string 对象的内容。例如：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s1(&quot;West”), s2(&quot;East&quot;);s1.swap(s2);  &#x2F;&#x2F; s1 &#x3D; &quot;East&quot;，s2 &#x3D; &quot;West&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="8-查找子串和字符">8. 查找子串和字符</span></h3><p>string 类有一些查找子串和字符的成员函数，它们的返回值都是子串或字符在 string 对象字符串中的位置（即下标）。如果查不到，则返回 string::npos。string: :npos 是在 string 类中定义的一个静态常量。这些函数如下：</p><ul><li>find：从前往后查找子串或字符出现的位置。</li><li>rfind：从后往前查找子串或字符出现的位置。</li><li>find_first_of：从前往后查找何处出现另一个字符串中包含的字符。例如：</li><li>s1.find_first_of(“abc”); //查找s1中第一次出现”abc”中任一字符的位置</li><li>find_last_of：从后往前查找何处出现另一个字符串中包含的字符。</li><li>find_first_not_of：从前往后查找何处出现另一个字符串中没有包含的字符。</li><li>find_last_not_of：从后往前查找何处出现另一个字符串中没有包含的字符。</li></ul><p>下面是 string 类的查找成员函数的示例程序。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main()&#123;        string s1(&quot;Source Code&quot;);        int n;        if ((n &#x3D; s1.find(&#39;u&#39;)) !&#x3D; string::npos) &#x2F;&#x2F;查找 u 出现的位置                cout &lt;&lt; &quot;1) &quot; &lt;&lt; n &lt;&lt; &quot;,&quot; &lt;&lt; s1.substr(n) &lt;&lt; endl;    &#x2F;&#x2F;输出 l)2,urce Code        if ((n &#x3D; s1.find(&quot;Source&quot;, 3)) &#x3D;&#x3D; string::npos)        &#x2F;&#x2F;从下标3开始查找&quot;Source&quot;，找不到                cout &lt;&lt; &quot;2) &quot; &lt;&lt; &quot;Not Found&quot; &lt;&lt; endl;  &#x2F;&#x2F;输出 2) Not Found        if ((n &#x3D; s1.find(&quot;Co&quot;)) !&#x3D; string::npos)        &#x2F;&#x2F;查找子串&quot;Co&quot;。能找到，返回&quot;Co&quot;的位置                cout &lt;&lt; &quot;3) &quot; &lt;&lt; n &lt;&lt; &quot;, &quot; &lt;&lt; s1.substr(n) &lt;&lt; endl;    &#x2F;&#x2F;输出 3) 7, Code        if ((n &#x3D; s1.find_first_of(&quot;ceo&quot;)) !&#x3D; string::npos)        &#x2F;&#x2F;查找第一次出现 &#39;c&#39;、&#39;e&#39;或&#39;o&#39;的位置                cout &lt;&lt; &quot;4) &quot; &lt;&lt; n &lt;&lt; &quot;, &quot; &lt;&lt; s1.substr(n) &lt;&lt; endl;    &#x2F;&#x2F;输出 4) l, ource Code        if ((n &#x3D; s1.find_last_of(&#39;e&#39;)) !&#x3D; string::npos)        &#x2F;&#x2F;查找最后一个 &#39;e&#39; 的位置            cout &lt;&lt; &quot;5) &quot; &lt;&lt; n &lt;&lt; &quot;, &quot; &lt;&lt; s1.substr(n) &lt;&lt; endl;  &#x2F;&#x2F;输出 5) 10, e        if ((n &#x3D; s1.find_first_not_of(&quot;eou&quot;, 1)) !&#x3D; string::npos)        &#x2F;&#x2F;从下标1开始查找第一次出现非 &#39;e&#39;、&#39;o&#39; 或 &#39;u&#39; 字符的位置                cout &lt;&lt; &quot;6) &quot; &lt;&lt; n &lt;&lt; &quot;, &quot; &lt;&lt; s1.substr(n) &lt;&lt; endl;    &#x2F;&#x2F;输出 6) 3, rce Code        return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="9-插入字符串">9. 插入字符串</span></h3><p>insert 成员函数可以在 string 对象中插入另一个字符串，返回值为对象自身的引用。例如：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s1(&quot;Limitless&quot;), s2(&quot;00&quot;);s1.insert(2, &quot;123&quot;);  &#x2F;&#x2F;在下标 2 处插入字符串&quot;123&quot;，s1 &#x3D; &quot;Li123mitless&quot;s1.insert(3, s2);  &#x2F;&#x2F;在下标 3 处插入 s2 , s1 &#x3D; &quot;Li10023mitless&quot;s1.insert(3, 5, &#39;X&#39;);  &#x2F;&#x2F;在下标 3 处插入 5 个 &#39;X&#39;，s1 &#x3D; &quot;Li1XXXXX0023mitless&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="10-删除子串">10. 删除子串</span></h3><p>erase 成员函数可以删除 string 对象中的子串，返回值为对象自身的引用。例如：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s1(&quot;Real Steel&quot;);s1.erase(1, 3);  &#x2F;&#x2F;删除子串(1, 3)，此后 s1 &#x3D; &quot;R Steel&quot;s1.erase(5);  &#x2F;&#x2F;删除下标5及其后面的所有字符，此后 s1 &#x3D; &quot;R Ste&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="11-替换子串">11. 替换子串</span></h3><p>replace 成员函数可以对 string 对象中的子串进行替换，返回值为对象自身的引用。例如：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s1(&quot;Real Steel&quot;);s1.replace(1, 3, &quot;123456&quot;, 2, 4);  &#x2F;&#x2F;用 &quot;123456&quot; 的子串(2,4) 替换 s1 的子串(1,3)cout &lt;&lt; s1 &lt;&lt; endl;  &#x2F;&#x2F;输出 R3456 Steelstring s2(&quot;Harry Potter&quot;);s2.replace(2, 3, 5, &#39;0&#39;);  &#x2F;&#x2F;用 5 个 &#39;0&#39; 替换子串(2,3)cout &lt;&lt; s2 &lt;&lt; endl;  &#x2F;&#x2F;输出 HaOOOOO Potterint n &#x3D; s2.find(&quot;OOOOO&quot;);  &#x2F;&#x2F;查找子串 &quot;00000&quot; 的位置，n&#x3D;2s2.replace(n, 5, &quot;XXX&quot;);  &#x2F;&#x2F;将子串(n,5)替换为&quot;XXX&quot;cout &lt;&lt; s2 &lt; &lt; endl;  &#x2F;&#x2F;输出 HaXXX Potter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
            <tag> 类 </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nth_element()函数的用法及技巧</title>
      <link href="2021/03/04/nth-element-han-shu-de-yong-fa-ji-ji-qiao/"/>
      <url>2021/03/04/nth-element-han-shu-de-yong-fa-ji-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1><span id="nth_element函数的用法及技巧">nth_element()函数的用法及技巧</span></h1><h2><span id="一-介绍">一、介绍</span></h2><p>头文件：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;algorithm&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>功能：求区间中第k小的元素</p><p>使用格式：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">nth_element(begin,nth,end,compare);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原理：nth_element(a,a+k,a+n)，函数把下标为k的元素放在了正确位置，对其它元素并没有排序，当k左边元素都小于等于它，右边元素都大于等于它，就快速定位了某个元素。</p><p><strong>例：</strong></p><p>对于 a[9]={4,7,6,9,1,8,2,3,5}，求第3小的元素</p><p>nth_element(a,a+2,a+9)，将下标为2，也就是第3个数放在正确的位置，求的是第3小的数a[2]</p><h2><span id="二-应用">二、应用</span></h2><h4><span id="例题货仓选址">例题：货仓选址</span></h4><p>在一条数轴上有 N 家商店，他们的坐标分别为 A[1]−A[N]。现在需要在数轴上建立一家货仓，每天清晨，从货仓到每家商店都要运送一车商品。为了提高效率，求把货仓建在何处，可以使得货仓到每家商店的距离之和最小，输出最短距离之和。</p><h4><span id="输入">输入</span></h4><p> 第一行输入一个数 N。（1≤N≤100000）（1≤N≤100000）</p><p> 接下来一行，输入 N 个数，表示商店的坐标。</p><h4><span id="输出">输出</span></h4><p> 输出最短距离之和。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;#define MAX_N 100000int A[MAX_N + 5];int main() &#123;    int n, sum &#x3D; 0;    cin &gt;&gt; n;    for (int i &#x3D; 0; i &lt; n; i++) cin &gt;&gt; A[i];    int mid &#x3D; n &#x2F; 2;    nth_element(A, A + mid, A + n);    for (int i &#x3D; 0; i &lt; n; i++) &#123;        sum +&#x3D; abs(A[mid] - A[i]);    &#125;    cout &lt;&lt; sum &lt;&lt; endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础（下）</title>
      <link href="2021/02/22/python-ji-chu-xia/"/>
      <url>2021/02/22/python-ji-chu-xia/</url>
      
        <content type="html"><![CDATA[<h1><span id="python基础下">python基础（下）</span></h1><h2><span id="十八-函数">十八、函数</span></h2><h3><span id="1函数的定义和调用">1.函数的定义和调用</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 函数,能够实现一个具体的功能, 是多行代码的整合</span><span class="token comment"># 函数的定义: 使用关键字 def ,</span><span class="token comment"># def 函数名():   # 函数名要遵循标识符的规则, 见名知意</span><span class="token comment">#     函数代码(函数体)</span><span class="token comment"># 函数定义,函数中的代码不会执行,在函数调用的时候,才会执行</span><span class="token comment"># 函数的好处: 重复的代码不需要多次书写, 减少代码冗余</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'函数定义前'</span><span class="token punctuation">)</span><span class="token comment"># 函数的定义, 函数的定义不会执行函数中算的代码</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'好好学习,天天向上'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'good good study, day day up'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'授课认真听讲,不要走神'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'函数定义后'</span><span class="token punctuation">)</span><span class="token comment"># 函数调用的时候才会执行函数中的代码   函数名()</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'函数调用前'</span><span class="token punctuation">)</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 代码会跳转到函数定义的地方去执行</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'函数调用后'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2函数的文档说明">2.函数的文档说明</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 函数的文档说明本质就是注释,告诉别人,这个函数怎么使用的,是干什么事的</span><span class="token comment"># 只不过这个注释，有特定的位置书写要求，要写在函数名字的下方</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    打印输出一个hello world,    """</span>    <span class="token comment"># aaa</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello wold'</span><span class="token punctuation">)</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 查看函数的文档注释可以使用help(函数名)</span><span class="token comment"># help(print)</span><span class="token builtin">help</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3书写带参数的函数">3.书写带参数的函数</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义一个函数,实现两个数的和</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># a 和 b 称为是形式参数, 简称形参,</span>    <span class="token comment"># a = 10</span>    <span class="token comment"># b = 20</span>    c <span class="token operator">=</span> a <span class="token operator">+</span> b    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"求和的结果是</span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># 函数调用, 如果函数在定义的时候有形参,那么在函数调用的时候,必须传递参数值</span><span class="token comment"># 这个参数称为 实际参数,简称实参</span><span class="token comment"># 在函数调用的时候,会将实参的值传递给形参</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4局部变量">4.局部变量</span></h3><p>1.局部变量的作用域（作用范围）： 当前函数的内部<br>2.局部变量的生存周期：在函数调用的时候被创建，函数调用结束之后，被销毁（删除）<br>3.局部变量只能在当前函数的内部使用，不能在函数的外部使用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 局部变量, 就是在函数内部定义的变量,就是局部变量</span><span class="token comment"># 局部变量,只能在函数内部使用,不能在函数外部和其他函数中使用</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 定义局部变量 num</span>    num <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token number">200</span>  <span class="token comment"># 这个num 和 func中的num 是没有关系的</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment"># 函数调用</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span>func1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 探究:局部变量能否在函数外部使用</span><span class="token comment"># print(num)  # 代码报错,局部变量不能在函数外部访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="5全局变量">5.全局变量</span></h3><p>1.全局变量： 就是在函数外部定义的变量。<br>2.在函数内部可以访问全局变量的值，如果想要修改全局变量的值，需要使用 global 关键字声明</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 全局变量： 就是在函数外部定义的变量。</span><span class="token comment"># 定义全局变量</span>g_num <span class="token operator">=</span> <span class="token number">100</span><span class="token comment"># 1. 能否在函数内部访问全局变量?   ====> 可以直接访问全局变量的值</span><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>g_num<span class="token punctuation">)</span><span class="token comment"># 2. 能否在函数内部修改全局变量的值?  ===> 不能直接修改全局变量的值</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># g_num = 200  # 这里不是修改全局变量的值,是定义一个局部变量,和全局变量的名字一样而已</span>    <span class="token comment"># 想要在函数内部修改全局变量的值,需要使用 global 关键字声明这个变量为全局变量</span>    <span class="token keyword">global</span> g_num    g_num <span class="token operator">=</span> <span class="token number">300</span>func1<span class="token punctuation">(</span><span class="token punctuation">)</span>func2<span class="token punctuation">(</span><span class="token punctuation">)</span>func1<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="6返回值">6.返回值</span></h3><p>在函数中定义的局部变量，或者通过计算得出的局部变量， 想要在函数外部访问和使用，此时就可以使用 return 关键字，将这个返回值返回</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 函数想要返回一个数据值,给调用的地方,需要使用关键字 return</span><span class="token comment"># return 关键字的作用: ①, 将return 后边的数据值进行返回 ②,程序代码遇到return, 会终止(结束)执行</span><span class="token comment"># 注意点: return 关键字必须写在函数中</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> a <span class="token operator">+</span> b    <span class="token comment"># 想要将求和的结果 c, 返回,即函数外部使用求和的结果, 不在函数内部打印结果</span>    <span class="token keyword">return</span> c    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'求和的结果是</span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>   <span class="token comment"># 函数遇到return就结束了,不会执行return之后的代码</span>result <span class="token operator">=</span> add<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'函数外部获得了求和的结果</span><span class="token interpolation"><span class="token punctuation">&#123;</span>result<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="7return-返回多个数据值">7.return 返回多个数据值</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> a <span class="token operator">+</span> b    d <span class="token operator">=</span> a <span class="token operator">-</span> b    <span class="token comment"># 需求: 想要将 c 和 d 都进行返回</span>    <span class="token comment"># 思考: 容器可以保存多个数据值, 那就可以将 c  和 d 放到容器中进行返回</span>    <span class="token comment"># return [c, d]</span>    <span class="token comment"># return (c, d)</span>    <span class="token comment"># return &#123;'c': c, 'd': d&#125;</span>    <span class="token comment"># return &#123;0: c, 1: d&#125;</span>    <span class="token keyword">return</span> c<span class="token punctuation">,</span> d  <span class="token comment"># 默认是组成元组进行返回的</span>result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"a+b的结果是</span><span class="token interpolation"><span class="token punctuation">&#123;</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">, a-b的结果是</span><span class="token interpolation"><span class="token punctuation">&#123;</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="8函数的嵌套调用">8.函数的嵌套调用</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'func1 start ... '</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'函数的其他代码'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'func1 end ...'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'func2 start ....'</span><span class="token punctuation">)</span>    func1<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 函数调用</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'func2 end....'</span><span class="token punctuation">)</span><span class="token comment"># 调用func1()</span><span class="token comment"># func1()</span><span class="token comment"># 调用func2()</span>func2<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="9函数传参的两种形式">9.函数传参的两种形式</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"a: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"b: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"c: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># 位置传参, 按照形参的位置顺序将实参的值传递给形参</span>func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># func(3, 1, 2)</span><span class="token comment"># 关键字传参,指定实参给到哪个形参, 注意点: 关键字必须是函数的形参名</span>func<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token comment"># func(c=10, a=20, b=30)</span><span class="token comment"># 混合使用, 先写位置传参,再写关键字传参</span><span class="token comment"># func(10, b=20, c=30)</span><span class="token comment"># func(a=10, 20, 30)  # 代码会报错</span><span class="token comment"># func(10, a=30, b=20)  # 代码会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="10缺省参数默认参数">10.缺省参数(默认参数)</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># print()</span><span class="token comment"># 缺省参数,形参.在函数定义的时候,给形参一个默认值,这个形参就是缺省参数,</span><span class="token comment"># 注意点: 缺省参数要写在普通参数的后边</span><span class="token comment"># 特点: 在函数调用的时候,如果给缺省参数传递实参值,使用的是传递的实参值,如果没有传递,使用默认值</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 形参c 称为缺省形参</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"a: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"b: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"c: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 没有给c 传递实参,使用默认值10</span>func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 给c传递实参值,使用传递的数据3</span><span class="token comment"># def fun1(a=1, b, c):   # 代码报错,语法错误</span><span class="token comment">#     pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="11不定长参数">11.不定长参数</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 两个普通的形参</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>func<span class="token punctuation">(</span>args<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token comment"># 在形参前边加上一个*, 该形参变为不定长元组形参,可以接收所有的位置实参, 类型是元组</span><span class="token comment"># 在形参前边加上两个**, 该形参变为不定长字典形参, 可以接收所有的关键字实参,类型是字典</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>func<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="12函数形参的完整格式">12.函数形参的完整格式</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 普通形参  缺省形参  不定长元组形参   不定长字典形参</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 先普通再 缺省</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 语法上不会报错,但是缺省参数不能使用默认值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 普通形参  不定长元组形参  缺省形参</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func3</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 普通形参  不定长元组形参  缺省形参 不定长字典形参</span>    <span class="token keyword">pass</span><span class="token comment"># func1(1, 2, 3, 4)</span><span class="token comment"># func2(1, 2, 3, 4)</span>func2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="13拆包">13.拆包</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 组包, 将多个数据值,组成元组,给到一个变量.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># (1, 2, 3)</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>  <span class="token comment"># 组包</span><span class="token comment"># 拆包: 将容器的数据分别给到多个变量, 需要注意: 数据的个数和变量的个数要保持一致</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> a   <span class="token comment"># 拆包</span><span class="token comment"># print(b, c, d)</span>e<span class="token punctuation">,</span> f <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> f<span class="token punctuation">)</span>my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> my_list<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>my_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'isaac'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> my_dict   <span class="token comment"># key值</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="14列表和键值对传参">14.列表和键值对传参</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'args'</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'kwargs'</span><span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># for i in args:</span>    <span class="token comment">#     num += i  # num = num + i</span>    <span class="token comment">#</span>    <span class="token comment"># for j in kwargs.values():</span>    <span class="token comment">#     num += j</span>    <span class="token comment">#</span>    <span class="token comment"># print(f"求和的结果为&#123;num&#125;")</span>my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>my_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span>func<span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># 将列表作为一个数据进行传递</span>func<span class="token punctuation">(</span><span class="token operator">*</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># 将列表中的每一个数据作为位置参数进行传递, 拆包</span>func<span class="token punctuation">(</span>my_dict<span class="token punctuation">)</span>  <span class="token comment"># 将my_dict 作为一个位置实参进行传递</span>func<span class="token punctuation">(</span><span class="token operator">*</span>my_dict<span class="token punctuation">)</span>  <span class="token comment"># 将my_dict中的key 作为位置实参进行传递</span>func<span class="token punctuation">(</span><span class="token operator">**</span>my_dict<span class="token punctuation">)</span>  <span class="token comment"># 将my_dict中键值对作为关键字实参进行传递</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="15引用">15.引用</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 可以使用 id() 查看变量的引用, 可以将id 值认为是内存地址的别名</span><span class="token comment"># python中数据值的传递的是引用</span><span class="token comment"># 赋值运算符可以改变变量的引用</span><span class="token comment"># 将数据10 存储到变量a 中,  本质是将数据10 所在内存的引用地址保存到变量a 中</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 将变量a中保存的引用地址给给到b</span>b <span class="token operator">=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token comment"># 使用print函数打印变量a 和b 引用中存储的值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>  <span class="token comment"># 将列表的引用地址保存到变量my_list 中</span>my_list1 <span class="token operator">=</span> my_list  <span class="token comment"># 将my_list 变量中存储的引用地址给到 my_list1</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list1<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>my_list1<span class="token punctuation">)</span><span class="token punctuation">)</span>my_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># 向列表中添加数据4, 将数据4 的引用保存到列表中</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list1<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>my_list1<span class="token punctuation">)</span><span class="token punctuation">)</span>my_list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list1<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>my_list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="1python代码在内存中的操作示意图">（1）python:代码在内存中的操作示意图：</span></h4><p><img src="https://i.loli.net/2021/02/21/cxk97KzRQwpfjZd.png"></p><h4><span id="2c代码在内存中的操作示意图">（2）C++：代码在内存中的操作示意图：</span></h4><p><img src="https://i.loli.net/2021/02/21/jJWQXpnUTrOCIlS.png"></p><h3><span id="16可变与不可变类型">16.可变与不可变类型</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 类型的可变与不可变: 在不改变变量引用的前提下,能否改变变量中引用中的数据,</span><span class="token comment"># 如果能改变是可变类型, 如果不能改变,是不可变类型</span><span class="token comment"># int float bool str list tuple dict</span><span class="token comment"># 不可变类型:  int float bool str  tuple</span><span class="token comment"># 可变类型: list dict</span><span class="token comment"># num = 10</span><span class="token comment"># num = 20</span><span class="token comment">#</span><span class="token comment"># my_list = [1, 2]</span><span class="token comment"># my_list.append(3)</span>a <span class="token operator">=</span> <span class="token number">1000</span>b <span class="token operator">=</span> <span class="token number">1000</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># python中的内存优化,对于不可变类型进行的,</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token string">'hello'</span>b <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># python中的内存优化,对于不可变类型进行的,</span>my_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>my_tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>my_tuple<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>my_tuple1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>my_tuple<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">(</span>my_tuple1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span>my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>my_list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>my_list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>my_tuple2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_tuple2<span class="token punctuation">)</span>my_tuple2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_tuple2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="17引用做函数参数">17.引用做函数参数</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 函数传参传递的也是引用</span>my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>  <span class="token comment"># 全局变量</span><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 为啥不加global, 因为没有修改 my_list 中存的引用值</span>    my_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> my_list    my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>   <span class="token comment"># 修改全局变量的值</span><span class="token keyword">def</span> <span class="token function">func4</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># += 对于列表来说,类似列表的extend方法,不会改变变量的引用地址</span>    a <span class="token operator">+=</span> a  <span class="token comment"># a = a + a, 修改了a变量a的引用</span>    <span class="token comment"># print(a)</span>func1<span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>    <span class="token comment"># [1, 2, 3, 4]</span>func2<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># [1, 2, 3, 4, 5]</span>func3<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># [1, 2, 3]</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token number">10</span>  <span class="token comment"># 不可变类型</span>func4<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment">#</span>func4<span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># [1, 2, 3, 1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="18匿名函数">18.匿名函数</span></h3><p>使用 <code>lambda</code> 关键字定义的函数就是匿名函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">lambda</span> 参数列表：表达式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>无参数无返回值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span><span class="token punctuation">)</span>：  函数代码<span class="token keyword">lambda</span><span class="token punctuation">:</span>函数代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>无参数有返回值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>有参数无返回值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">lambda</span> a<span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>有参数有返回值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token keyword">lambda</span> a<span class="token punctuation">,</span> b<span class="token punctuation">:</span> a <span class="token operator">+</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 无参无返回值</span><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello lambda'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>func1<span class="token punctuation">(</span><span class="token punctuation">)</span>f1 <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello lambda'</span><span class="token punctuation">)</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 2. 无参有返回值</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span>f2 <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 3. 有参无返回值</span><span class="token keyword">def</span> <span class="token function">func3</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>f3 <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>f3<span class="token punctuation">(</span><span class="token string">'hwllo'</span><span class="token punctuation">)</span><span class="token comment"># 4. 有参有返回值</span><span class="token keyword">def</span> <span class="token function">func4</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> argsf4 <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args<span class="token punctuation">:</span> args<span class="token keyword">print</span><span class="token punctuation">(</span>f4<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="匿名函数的应用场景-作为函数的参数使用">匿名函数的应用场景 – 作为函数的参数使用</span></h4></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">my_calc</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    进行四则运算    :param a: 第一个数据    :param b: 第二个数据    :param func: 函数,要进行的运算    :return: 运算的结果    """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'其他的函数代码...'</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> func<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token comment"># 调用</span>my_calc<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> add<span class="token punctuation">)</span>my_calc<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span> b<span class="token punctuation">:</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>my_calc<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span> b<span class="token punctuation">:</span> a <span class="token operator">*</span> b<span class="token punctuation">)</span>my_calc<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span> b<span class="token punctuation">:</span> a <span class="token operator">/</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="lambda-函数作为函数参数列表中字典排序">lambda 函数作为函数参数(列表中字典排序)</span></h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 列表排序, 列表中的数据的类型要保持一致</span>my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>my_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment"># list1.sort()  # 程序报错</span><span class="token comment"># 匿名函数的形参是列表中的每一个数据</span>list1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>list1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'aghdd'</span><span class="token punctuation">,</span> <span class="token string">'bc'</span><span class="token punctuation">,</span> <span class="token string">'ghlj'</span><span class="token punctuation">,</span> <span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'ab'</span><span class="token punctuation">]</span>list2<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># print(list2)</span><span class="token comment"># 需求: 根据列表中字符串的长度,列表进行排序</span><span class="token comment"># list2.sort(key=len)</span>list2<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token comment"># sort(key= lambda 形参: (排序规则1, 排序规则2, ...))</span><span class="token comment"># 当第一个规则相同,会按照第二个规则排序</span><span class="token comment"># list1.sort(key=lambda x: (x['age'], x['name']))</span><span class="token comment"># list1.sort(key=lambda x: (x['age'], x['name']), reverse=True)</span><span class="token comment"># print(list1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="十九-文件操作">十九、文件操作</span></h2><h3><span id="1读文件">1.读文件</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 打开文件, 是文件从硬盘中存到内存中</span><span class="token comment"># open(file, mode='r',  encoding)</span><span class="token comment"># file 要操作的文件名字, 类型是 str</span><span class="token comment"># mode, 文件打开的方式, r(read) 只读打开, w(write) 只写打开  a(append) 追加打开</span><span class="token comment"># encoding  文件的编码格式, 常见的编码格式有两种, 一种是gbk, 一种是utf-8</span><span class="token comment"># 返回值, 文件对象, 后续所有的文件操作,都需要通过这个文件对象进行</span><span class="token comment"># 以只读的方式打开当前目录中,1.txt 文件, 文件不存在会报错</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token comment"># 2. 读文件 文件对象.read()</span>buf <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token comment"># 3. 关闭文件  文件.close()  将内存中三大文件同步到硬盘中</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 打开文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment"># 2. 读写文件 文件对象.read(n)  n 一次读取多少字符的内容,默认不写,读取全部内容</span>buf <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>  <span class="token comment"># 123</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span>buf <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">#</span><span class="token keyword">print</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token comment"># 3. 关闭文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment"># f.readline()  # 一次读取一行的内容, 返回值是读取到的内容(str)</span><span class="token comment"># buf = f.readline()</span><span class="token comment"># f.readlines()  # 按行读取,一次读取所有行,返回值是列表, 列表中的每一项是一个字符串,即一行的内容</span>buf <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>buf <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> buf<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2写文件">2.写文件</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 打开文件 w 方式打开文件,文件不存在,会创建文件, 文件存在,会覆盖清空原文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment"># 2. 写文件 文件对象.write(写入文件的内容)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'hello world!\n'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'hello python!\n'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'你好,中国!'</span><span class="token punctuation">)</span><span class="token comment"># 3. 关闭文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3追加内容">3.追加内容</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># a 方式打开文件, 追加内容,在文件的末尾写入内容</span><span class="token comment"># 文件不存在,会创建文件</span><span class="token comment"># 注意点: 不管是a 方式打开文件,还是 w 方式打开文件,写内容,都是使用 write()函数</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'b.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment"># f.write('hello world!\n')</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'111\n'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4文件打开模式">4.文件打开模式</span></h3><table><thead><tr><th align="left">访问模式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">r</td><td align="left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="left">w</td><td align="left">打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">a</td><td align="left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">rb</td><td align="left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="left">wb</td><td align="left">以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">ab</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">r+</td><td align="left">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="left">w+</td><td align="left">打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">a+</td><td align="left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="left">rb+</td><td align="left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="left">wb+</td><td align="left">以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">ab+</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><h3><span id="5读取大文件">5.读取大文件</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    buf <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> buf<span class="token punctuation">:</span>  <span class="token comment"># if len(buf) > 0   容器,可以直接作为判断条件,容器中有内容,为True,没有数据是False</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># 文件读完了</span>        <span class="token keyword">break</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'b.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    buf <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment"># f.read(4096)</span>    <span class="token keyword">if</span> buf<span class="token punctuation">:</span>        <span class="token comment"># print(buf, end='')</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="6二进制文件操作">6.二进制文件操作</span></h3><pre class="line-numbers language-none"><code class="language-none">文本文件: txt, .py .md  能够使用记事本打开的文件二进制文件: 具有特殊格式的文件, mp3 mp4 rmvb avi png jpg 等    文本文件可以使用 文本方式打开文件,也可以使用二进制的方式打开文件二进制文件,只能使用二进制的方式打开文件二进制打开方式如下: 不管读取,还是书写,都需要使用二进制的数据rb wb  ab注意点: 不能指定 encoding 参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'c.txt'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># encode() 将str 转换为二进制格式的字符串</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>f1 <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'c.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>buf <span class="token operator">=</span> f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="7文件备份">7.文件备份</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">file_name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入要备份的文件名'</span><span class="token punctuation">)</span><span class="token comment"># 1. 用只读的方式,打开文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token comment"># 2. 读取文件内容</span>buf <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 3. 关闭文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 根据原文件名,找到文件后缀和文件名</span>index <span class="token operator">=</span> file_name<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token comment"># 后缀  file_name[index: ]</span><span class="token comment"># 新文件名</span>new_file_name <span class="token operator">=</span> file_name<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'[备份]'</span> <span class="token operator">+</span> file_name<span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_file_name<span class="token punctuation">)</span><span class="token comment"># 4. 只写的方式,打开新文件</span>f_w <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>new_file_name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token comment"># 5. 将 第 2 步读取的内容写入新文件</span>f_w<span class="token punctuation">.</span>write<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token comment"># 6. 关闭新文件</span>f_w<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="8文件和文件夹的操作">8.文件和文件夹的操作</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对文件和目录的操作,需要导入 os 模块</span><span class="token keyword">import</span> os<span class="token comment"># 1. 文件重命名 os.rename(原文件路径名, 新文件路径名)</span><span class="token comment"># os.rename('a.txt', 'aa.txt')</span><span class="token comment"># 2. 删除文件 os.remove(文件的路径名)</span><span class="token comment"># os.remove('aa.txt')</span><span class="token comment"># 3. 创建目录 os.mkdir(目录路径名)  make directory</span><span class="token comment"># os.mkdir('test')</span><span class="token comment"># os.mkdir('test/aa')</span><span class="token comment"># 4. 删除空目录  os.rmdir(目录名)  remove directory</span><span class="token comment"># os.rmdir('test/aa')</span><span class="token comment"># 5. 获取当前所在的目录 os.getcwd()  get current working directory</span>buf <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token comment"># 6. 修改当前的目录 os.chdir(目录名)  change dir</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>buf <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token comment"># 7. 获取指定目录中的内容,  os.listdir(目录), 默认不写参数,是获取当前目录中的内容</span><span class="token comment"># 返回值是列表, 列表中的每一项是文件名</span>buf <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># test</span><span class="token keyword">print</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="9批量修改文件名">9.批量修改文件名</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">create_files</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        file_name <span class="token operator">=</span> <span class="token string">'test/file_'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.txt'</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>        f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_files_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        file_name <span class="token operator">=</span> <span class="token string">'file_'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.txt'</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>        f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'../'</span><span class="token punctuation">)</span>  <span class="token comment"># ../ 上一级目录</span><span class="token keyword">def</span> <span class="token function">modify_filename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>    buf_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># print(buf_list)</span>    <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> buf_list<span class="token punctuation">:</span>        new_file <span class="token operator">=</span> <span class="token string">'py43_'</span> <span class="token operator">+</span> <span class="token builtin">file</span>        os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> new_file<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'../'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">modify_filename_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>    buf_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># print(buf_list)</span>    <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> buf_list<span class="token punctuation">:</span>        num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'py43_'</span><span class="token punctuation">)</span>        new_file <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">[</span>num<span class="token punctuation">:</span><span class="token punctuation">]</span>        os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> new_file<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'../'</span><span class="token punctuation">)</span><span class="token comment"># create_files()</span><span class="token comment"># create_files_1()</span><span class="token comment"># modify_filename()</span>modify_filename_1<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="二十-面向对象">二十、面向对象</span></h2><h3><span id="1类的定义">1.类的定义</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">随后的代码<span class="token punctuation">,</span>使用狗类进行演示说明类名<span class="token punctuation">:</span> Dog<span class="token punctuation">(</span>狗类<span class="token punctuation">)</span>属性<span class="token punctuation">:</span>    姓名 name    年龄 age    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>方法<span class="token punctuation">:</span>    吃  eat<span class="token punctuation">(</span><span class="token punctuation">)</span>    玩  play<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>类定义前后需要两个空行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在python中,定义类使用关键字 class , 语法如下</span><span class="token triple-quoted-string string">"""# object 是所有的类基类,即最初始的类# 类名: 遵循大驼峰的命名规范class 类名(object):    类中的代码"""</span><span class="token comment"># 定义方式一, 推荐</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment"># 定义方式二</span><span class="token keyword">class</span> <span class="token class-name">Dog1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 括号中的内容可以不写</span>    <span class="token keyword">pass</span><span class="token comment"># 定义方式三</span><span class="token keyword">class</span> <span class="token class-name">Dog2</span><span class="token punctuation">:</span>   <span class="token comment"># 括号也可以不写</span>    <span class="token keyword">pass</span><span class="token triple-quoted-string string">"""新式类: 直接或者间接继承object的类, 在python3中,所有的类默认继承object类,即python3中所有的类都是新式类旧式类(经典类): 已经过时,不推荐使用"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2创建对象">2.创建对象</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义类</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 在类中定义的函数,称为方法, 函数的所有知识都可以使用</span>    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 暂时不管self ,</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'小狗快乐的拆家中......'</span><span class="token punctuation">)</span><span class="token comment"># 创建对象 变量 = 类名()</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个对象,dog</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">)</span>dog1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个对象 dog1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>dog1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 可以使用对象调用类中的方法.  对象.方法名()</span>dog<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span>dog1<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3类外部添加和获取对象属性">3.类外部添加和获取对象属性</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'小狗快乐的拆家中.....'</span><span class="token punctuation">)</span><span class="token comment"># 创建对象</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 给对象添加属性  对象.属性名 = 属性值</span>dog<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'大黄'</span>  <span class="token comment"># 给dog对象添加name属性,属性值是 大黄</span>dog<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">2</span>   <span class="token comment"># 给dog对象添加age属性,属性值是 2</span><span class="token comment"># 获取对象的属性值  对象.属性名</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token comment"># 修改属性值 和添加一样,存在就是修改,不存在,就是添加</span>dog<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">3</span>  <span class="token comment"># age 属性已经存在,所以是修改属性值</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span>dog1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 新创建一个对象 dog1</span>dog1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'小白'</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4类内部操作属性">4.类内部操作属性</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># self 作为类中方法的第一个形参,在通过对象调用方法的时候,不需要手动的传递实参值,是python解释器</span>    <span class="token comment"># 自动将调用该方法的对象传递给self, 所以self这个形参代表的是对象</span>    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'self: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">id</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'小狗 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> 在快乐的拆家中.....'</span></span><span class="token punctuation">)</span><span class="token comment"># 创建对象</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'大黄'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"dog : </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">id</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>dog1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>dog1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'小白'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"dog1: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">id</span><span class="token punctuation">(</span>dog1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>dog1<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="5魔法方法">5.魔法方法</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">在 python 的类中,有一类方法,这类方法以 <span class="token variable"><span class="token variable">`</span>两个下划线开头<span class="token variable">`</span></span> 和<span class="token variable"><span class="token variable">`</span>两个下划线结尾<span class="token variable">`</span></span>, 并且在<span class="token variable"><span class="token variable">`</span>满足某个特定条件的情况下,会自动调用<span class="token variable">`</span></span><span class="token builtin class-name">.</span> 这类方法,称为魔法方法如何学习魔法方法:<span class="token number">1</span>. 魔法方法在什么情况下会自动调用<span class="token number">2</span>. 这个魔法方法有什么作用<span class="token number">3</span>. 这个魔法方法有哪些注意事项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="51__init__">5.1<code>__init__()</code></span></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">调用时机: 在创建对象之后,会立即调用.作用: <span class="token number">1</span>. 用来给对象添加属性,给对象属性一个初始值<span class="token punctuation">(</span>构造函数<span class="token punctuation">)</span><span class="token number">2</span>. 代码的业务需求,每创建一个对象,都需要执行的代码可以写在 <span class="token variable"><span class="token variable">`</span>__init__ <span class="token variable">`</span></span>中注意点: 如果 <span class="token variable"><span class="token variable">`</span>__init__<span class="token variable">`</span></span> 方法中,有出了 self 之外的形参,那么在创建的对象的时候,需要给额外的形参传递实参值 <span class="token variable"><span class="token variable">`</span>类名<span class="token punctuation">(</span>实参<span class="token punctuation">)</span><span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># self 是对象</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是__init__方法,我被调用了'</span><span class="token punctuation">)</span>        <span class="token comment"># 对象.属性名 = 属性值</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'小狗'</span><span class="token comment"># 创建对象</span><span class="token comment"># Dog()</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span>dog1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># self 是对象</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是__init__方法,我被调用了'</span><span class="token punctuation">)</span>        <span class="token comment"># 对象.属性名 = 属性值</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"小狗</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string">快乐的拆家中..."</span></span><span class="token punctuation">)</span><span class="token comment"># 创建对象 类名(实参值)</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span>dog<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span>dog1 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'小白'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>dog1<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="52__str__">5.2<code>__str__()</code></span></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">调用时机:<span class="token number">1</span>. <span class="token variable"><span class="token variable">`</span>print<span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token variable">`</span></span>, 会自动调用 <span class="token variable"><span class="token variable">`</span>__str__<span class="token variable">`</span></span> 方法, 打印输出的结果是 <span class="token variable"><span class="token variable">`</span>__str__<span class="token variable">`</span></span> 方法的返回值<span class="token number">2</span>. <span class="token variable"><span class="token variable">`</span>str<span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token variable">`</span></span>  类型转换,将自定义对象转换为字符串的时候, 会自动调用应用:<span class="token number">1</span>. 打印对象的时候,输出一些属性信息<span class="token number">2</span>. 需要将对象转换为字符串类型的时候注意点:<span class="token variable"><span class="token variable">`</span>方法必须返回一个字符串<span class="token variable">`</span></span>,只有 self 一个参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 添加属性</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是__str__, 我被调用了...'</span><span class="token punctuation">)</span>        <span class="token comment"># 必须返回一个字符串</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"小狗的名字是</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string">, 年龄是</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token comment"># 创建对象</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span>  <span class="token comment"># 没有定义 __str__ 方法,print(对象) 默认输出对象的引用地址</span>str_dog <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span>  <span class="token comment"># 没有定义 __str__ 方法, 类型转换,赋值的也是引用地址</span><span class="token comment"># print(str_dog)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="53__del__">5.3<code>__del__()</code></span></h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 添加属性</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 必须返回一个字符串</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"小狗的名字是</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string">, 年龄是</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'我是__del__ 方法,我被调用了, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string">被销毁了.......'</span></span><span class="token punctuation">)</span><span class="token comment"># 创建一个对象</span><span class="token comment"># dog = Dog('大黄', 2)</span><span class="token comment"># dog1 = Dog('小白', 1)</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'小花'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 小花 引用计数为1</span>dog2 <span class="token operator">=</span> dog   <span class="token comment"># 小花 引用计数2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第一次删除之前'</span><span class="token punctuation">)</span><span class="token keyword">del</span> dog  <span class="token comment"># dog 变量不能使用, 小花对象引用计数 1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第一次删除之后'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第二次删除之前'</span><span class="token punctuation">)</span><span class="token keyword">del</span> dog2  <span class="token comment"># dog2变量不能使用, 小花对象的引用计数为 0, 会立即__del__ 方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第二次删除之后'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="54__repr__">5.4<code>__repr__()</code></span></h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'cpp'</span><span class="token punctuation">]</span>   <span class="token comment"># 列表中存储了三个字符串对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        repr 方法和 str 方法,非常类似,也是必须返回一个字符串        repr 显示的信息更准确        如果没有定义__str__(),print(对象)会调用__repr__()        """</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token comment"># 将三个Dog类的对象添加到列表中</span>my_list1 <span class="token operator">=</span> <span class="token punctuation">[</span>Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Dog<span class="token punctuation">(</span><span class="token string">'小白'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Dog<span class="token punctuation">(</span><span class="token string">'小花'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list1<span class="token punctuation">)</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span>   <span class="token comment"># __str__</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="6继承">6.继承</span></h3><h4><span id="61继承的基本语法">6.1继承的基本语法</span></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">继承: 描述的类与类之间所属关系.基本语法:class 类B<span class="token punctuation">(</span>类A<span class="token punctuation">)</span>:    pass称为类 B 继承类 A特点: B类的对象可以使用 A类的属性和方法优点: 代码复用.重复相同的代码不用多次书写.名词:     类A: 父类 基类    类B: 子类派生类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 定义是个 动物类 animal类</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 2. 在animal类书写 play方法,输出快乐的玩耍....</span>    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'快乐的玩耍....'</span><span class="token punctuation">)</span><span class="token comment"># 3. 定义Dog类继承animal类,</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment"># 4. 创建dog类对象.调用父类的方法</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="62继承的分类">6.2继承的分类</span></h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""单继承: 如果一个类只有一个父类,把这种继承关系称为单继承多继承: 如果一个类有多个父类,把这种继承关系称为多继承多层继承: C--> B --> A"""</span><span class="token comment"># 1. 定义是个 动物类 animal类</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 对于Animal类和object类来说,单继承</span>    <span class="token comment"># 2. 在animal类书写 play方法,输出快乐的玩耍....</span>    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'快乐的玩耍....'</span><span class="token punctuation">)</span><span class="token comment"># 3. 定义Dog类继承animal类,</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># Dog --> Animal 也是单继承, Dog --> Animal --> object 这种继承关系称为多层继承</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'汪汪汪叫.......'</span><span class="token punctuation">)</span><span class="token comment"># 定义类 XTQ类, 继承 Dog类</span><span class="token comment"># 多层继承中,子类可以使用所有继承链中的类中的方法和属性</span><span class="token keyword">class</span> <span class="token class-name">XTQ</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># XTQ --> Dog 单继承, XTQ --> Dog --> Animal 类, 多层继承</span>    <span class="token keyword">pass</span>xtq <span class="token operator">=</span> XTQ<span class="token punctuation">(</span><span class="token punctuation">)</span>xtq<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 调用父类Dog中的方法</span>xtq<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 调用爷爷类 animal类中的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="63子类重写父类的同名方法">6.3子类重写父类的同名方法</span></h4><pre class="line-numbers language-none"><code class="language-none">重写: 子类定义和父类名字相同的方法.为什么重写: 父类中的方法,不能满足子类对象的需求,所以要重写.重写之后的特点: 子类对象调用子类自己的方法,不再调用的方法,父类对象调用父类自己的方法.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 定义Dog类, 书写bark方法, 输出 汪汪汪叫</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'汪汪汪叫.........'</span><span class="token punctuation">)</span><span class="token comment"># 2. 定义XTQ类,继承Dog类. 重写父类中的bark方法, 输出 嗷嗷嗷叫</span><span class="token keyword">class</span> <span class="token class-name">XTQ</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'嗷嗷嗷叫--------'</span><span class="token punctuation">)</span><span class="token comment"># 创建Dog类对象</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 父类自己的</span><span class="token comment"># 创建XTQ类对象</span>xtq <span class="token operator">=</span> XTQ<span class="token punctuation">(</span><span class="token punctuation">)</span>xtq<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="64-子类调用父类的同名方法">6.4 子类调用父类的同名方法</span></h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 定义Dog类, 书写bark方法, 输出 汪汪汪叫</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'汪汪汪叫.........'</span><span class="token punctuation">)</span><span class="token comment"># 2. 定义XTQ类,继承Dog类. 重写父类中的bark方法, 输出 嗷嗷嗷叫</span><span class="token keyword">class</span> <span class="token class-name">XTQ</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'嗷嗷嗷叫--------'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">see_host</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""看见主人之后,要汪汪汪叫,不能嗷嗷嗷叫"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'看见主人了,'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token comment"># self.bark()</span>        <span class="token comment"># 想要在子类中调用父类的同名方法</span>        <span class="token comment"># 方法一: 父类名.方法名(self, 其他参数), 通过实例对象.方法名() 调用方法,不需要给self传递实参值,</span>        <span class="token comment"># python解释器会自动将对象作为实参值传递给self形参, 如果是通过类名.方法() 调用,python解释器就</span>        <span class="token comment"># 不会自动传递实参值,需要手动给self形参传递实参值</span>        Dog<span class="token punctuation">.</span>bark<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token comment"># 方法二  super(类A, self).方法名(参数) , 会调用当类A 的父类中的方法</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>XTQ<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 调用 XTQ类父类中的bark方法</span>        <span class="token comment"># 方法三  是方法二的简写, super().方法名(参数) ==> super(当前类, self).方法名()</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建XTQ类对象</span>xtq <span class="token operator">=</span> XTQ<span class="token punctuation">(</span><span class="token punctuation">)</span>xtq<span class="token punctuation">.</span>see_host<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="65-继承中的-init-方法">6.5 继承中的 init 方法</span></h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 定义Dog类</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 添加属性</span>        self<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'名字为:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string">, 年龄为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token comment"># 2. 定义XTQ类继承Dog类</span><span class="token keyword">class</span> <span class="token class-name">XTQ</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 子类重写了父类的__init__ 方法,默认不再调用父类的init方法, 需要手动的调用父类的init方法</span>    <span class="token comment"># 一般是先写父类形参，再写子类形参</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>color <span class="token operator">=</span> color    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'名字为:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string">, 年龄为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span></span><span class="token string">, 毛色为:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>color<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token comment"># 3. 创建XTQ类对象</span>xtq <span class="token operator">=</span> XTQ<span class="token punctuation">(</span><span class="token string">'小黑'</span><span class="token punctuation">,</span> <span class="token string">'红色'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xtq<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="66多继承">6.6多继承</span></h4><p>如果一个类有两个及以上的父类,就把这种继承关系称为多继承</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 定义Dog类, 定义bark方法,和 eat方法</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'汪汪汪叫.....'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'啃骨头.....'</span><span class="token punctuation">)</span><span class="token comment"># 2. 定义God类, 定义 play方法和eat方法</span><span class="token keyword">class</span> <span class="token class-name">God</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在云中飘一会....'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'吃蟠桃仙丹....'</span><span class="token punctuation">)</span><span class="token comment"># 3. 定义XTQ类, 继承Dog类和God类</span><span class="token comment"># class XTQ(Dog, God):  # XTQ 类有两个父类,这个继承关系称为多继承,XTQ类对象,可以调用两个父类中的属性和方法</span><span class="token keyword">class</span> <span class="token class-name">XTQ</span><span class="token punctuation">(</span>God<span class="token punctuation">,</span> Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># XTQ 类有两个父类,这个继承关系称为多继承,XTQ类对象,可以调用两个父类中的属性和方法</span>    <span class="token keyword">pass</span><span class="token comment"># 4. 创建XTQ类对象</span>xtq <span class="token operator">=</span> XTQ<span class="token punctuation">(</span><span class="token punctuation">)</span>xtq<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 调用 Dog父类中的方法</span>xtq<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 调用 God父类中的方法</span>xtq<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 两个父类都存在eat方法,子类对象调用的是 第一个父类中的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="67多继承中调用指定父类方法">6.7多继承中调用指定父类方法</span></h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 定义Dog类, 定义bark方法,和 eat方法</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'汪汪汪叫.....'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'啃骨头.....'</span><span class="token punctuation">)</span><span class="token comment"># 2. 定义God类, 定义 play方法和eat方法</span><span class="token keyword">class</span> <span class="token class-name">God</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在云中飘一会....'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'吃蟠桃仙丹....'</span><span class="token punctuation">)</span><span class="token comment"># 3. 定义XTQ类, 继承Dog类和God类</span><span class="token comment"># class XTQ(Dog, God):  # XTQ 类有两个父类,这个继承关系称为多继承,XTQ类对象,可以调用两个父类中的属性和方法</span><span class="token keyword">class</span> <span class="token class-name">XTQ</span><span class="token punctuation">(</span>God<span class="token punctuation">,</span> Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># XTQ 类有两个父类,这个继承关系称为多继承,XTQ类对象,可以调用两个父类中的属性和方法</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子类重写eat方法,调用子类自己的方法'</span><span class="token punctuation">)</span>        <span class="token comment"># 调用指定父类中的方法</span>        <span class="token comment"># 方法一  类名.方法名(self, 参数)</span>        <span class="token comment"># Dog.eat(self)</span>        <span class="token comment"># God.eat(self)</span>        <span class="token comment"># 方法二 super(类A, self).方法名(参数)  类A的父类(继承顺序链的下一个类)中的方法</span>        <span class="token comment"># super(XTQ, self).eat()  # God 类中的方法</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>God<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 调用的Dog类中的方法</span>        <span class="token comment"># super(Dog, self).eat()  # 调用的object类中的方法,注意: object类中没有eat方法,代码报错</span><span class="token comment"># 4. 创建XTQ类对象</span>xtq <span class="token operator">=</span> XTQ<span class="token punctuation">(</span><span class="token punctuation">)</span>xtq<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 调用 Dog父类中的方法</span>xtq<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 调用 God父类中的方法</span>xtq<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 两个父类都存在eat方法,子类对象调用的是 第一个父类中的方法</span><span class="token comment"># 类名.__mro__ 可以当前类的继承顺序链,也叫做方法的调用顺序</span><span class="token comment"># print(XTQ.__mro__)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="7私有权限">7.私有权限</span></h3><pre class="line-numbers language-none"><code class="language-none">访问权限控制: 在什么地方可以使用和操作.私有权限: 定义: 在方法和属性前加上两个下划线, 就变为私有.1. 不能在类外部通过对象直接访问和使用, 只能在类内部访问和使用2. 不能被子类继承,公有: 不是私有的,就是公有的.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="71私有属性">7.1私有属性</span></h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""私有属性,只需要在原属性名前加上两个下划线,即可目的: 保证数据的相对安全,想要访问和使用私有属性: 定义一个公有的方法,通过这个方法使用"""</span><span class="token comment"># 案例需求: 定义People 类, 定义属性 ICBC_money , 钱不能随便被修改,必须是合法的终端才可以操作</span><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># python中的私有本质是 修改属性的名字, 在创建对象的时候,会自动的修改属性名</span>        <span class="token comment"># 在属性名的前边加上 _类名前缀</span>        self<span class="token punctuation">.</span>__ICBC_money <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 定义私有属性</span>    <span class="token comment"># 定义公有的方法,提供接口,修改余额</span>    <span class="token keyword">def</span> <span class="token function">get_money</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__ICBC_money    <span class="token keyword">def</span> <span class="token function">set_money</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入金额:'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__ICBC_money <span class="token operator">+=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token comment"># self.__ICBC_money += money</span><span class="token comment"># 创建People类对象</span>xw <span class="token operator">=</span> People<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 实例对象.__dict__  可以查看对象具有的属性信息,类型是字典,字典的key是属性名, 字典的value是属性值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'赋值之前:'</span><span class="token punctuation">,</span> xw<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span><span class="token comment"># print(xw.__ICBC_money)</span>xw<span class="token punctuation">.</span>__ICBC_money <span class="token operator">=</span> <span class="token number">1000</span>  <span class="token comment"># 不是修改私有属性,是重新添加一个公有属性</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'赋值之后:'</span><span class="token punctuation">,</span> xw<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xw<span class="token punctuation">.</span>__ICBC_money<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xw<span class="token punctuation">.</span>get_money<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 0</span>xw<span class="token punctuation">.</span>set_money<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xw<span class="token punctuation">.</span>get_money<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 1000</span>xw<span class="token punctuation">.</span>set_money<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xw<span class="token punctuation">.</span>get_money<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 500</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="72私有方法">7.2私有方法</span></h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""私有方法: 在方法的前边加上两个__ ,就为私有方法私有方法,不能在类外部访问作用: 一般作为类内部的方法使用,不让在外部直接调用, 保证业务逻辑不被破坏"""</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">born</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""生小狗的方法, 生一个小狗,休息30天"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'生了一只小狗...'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__sleep</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'休息30天'</span><span class="token punctuation">)</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># dog.__sleep()</span>dog<span class="token punctuation">.</span>born<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="8类属性">8.类属性</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""对象(实例对象): 通过class定义的类创建的, 即通过类实例化来的, 又称为实例, 实例对象实例对象定义的属性称为是 实例属性. 通过实例对象(self) 定义的属性都是实例属性实例属性: 每个实例对象中都存在一份,并且值可能是不一样的类(类对象): 通过class定义的,又称为 类对象, 是python解释器在创建类的时候自动创建的作用: 1. 通过类对象,去定义实例对象   2. 类对象可以保存一些属性信息,称为类属性类属性的定义: 在类内部,方法外部定义的变量就是类属性类属性,字内存中只有一份如何确定一个属性是该定义为实例属性还是类属性?先假设这个属性为实例属性,查看这个属性值对于不同的实例对象, 属性值是否都一样,并且需要同时变化.如果是, 则可以定义为类属性如果不是,则可以定义为实例属性"""</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 定义类属性, 类名</span>    class_name <span class="token operator">=</span> <span class="token string">'狗类'</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 定义的都是实例属性</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token comment"># 创建Dog 类对象</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># print(dog.__dict__)  # 打印dog对象具有的属性</span><span class="token comment"># 类名.__dict__  查看类对象具有的属性</span><span class="token comment"># print(Dog.__dict__)</span><span class="token comment"># 访问类属性</span><span class="token comment"># 类名.类属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>Dog<span class="token punctuation">.</span>class_name<span class="token punctuation">)</span><span class="token comment"># 修改类属性  类名.类属性 = 属性值</span>Dog<span class="token punctuation">.</span>class_name <span class="token operator">=</span> <span class="token string">'Dog类'</span><span class="token keyword">print</span><span class="token punctuation">(</span>Dog<span class="token punctuation">.</span>class_name<span class="token punctuation">)</span><span class="token comment"># 补充, 注意: 如果不存在和实例属性名相同的类属性.则可以使用实例对象访问类属性的值</span><span class="token comment"># 如果存在重名,则使用实例属性访问的一定是实例属性,不是类属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>class_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="9类方法">9.类方法</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""实例方法: 类中默认定义的方法,就是实例方法, 第一个参数为self,表示实例对象类方法: 使用 @classmethod 装饰的方法,称为类方法, 第一个参数是cls,代表的是类对象自己什么情况定义为实例方法,什么情况定义为类方法?1. 如果在方法中使用了实例属性, 那么该方法必须定义为实例方法2. 前提:不需要使用实例属性. 需要使用类属性,可以将这个方法定义为类方法"""</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    class_name <span class="token operator">=</span> <span class="token string">'狗类'</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 实例方法</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"小狗</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> 在快乐的玩耍...."</span></span><span class="token punctuation">)</span>    <span class="token comment"># def get_class_name(self):  # 是实例方法, 因为没有使用实例属性,所以可以定义为类方法</span>    <span class="token comment">#     return Dog.class_name</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">get_class_name</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># cls 是类方法的默认形参,在调用的时候,不需要手动传递,python解释器会自动传递</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>class_namedog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>get_class_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 对象.类方法()</span><span class="token comment"># 类名.类方法()</span><span class="token keyword">print</span><span class="token punctuation">(</span>Dog<span class="token punctuation">.</span>get_class_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="10静态方法">10.静态方法</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""实例方法: 类中默认定义的方法,就是实例方法, 第一个参数为self,表示实例对象类方法: 使用 @classmethod 装饰的方法,称为类方法, 第一个参数是cls,代表的是类对象自己静态方法: 使用 @staticmethod 装饰的方法,称为静态方法, 对参数没有特殊要求,可以有,可以没有什么情况定义为实例方法,什么情况定义为类方法, 什么情况下静态方法?1. 如果在方法中使用了实例属性, 那么该方法必须定义为实例方法2. 前提:不需要使用实例属性. 需要使用类属性,可以将这个方法定义为类方法3. 前提:不需要使用实例属性,同时也不需要使用类属性, 此时可以将这个方法定义为静态方法"""</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    class_name <span class="token operator">=</span> <span class="token string">'狗类'</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 实例方法</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"小狗</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> 在快乐的玩耍...."</span></span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>  <span class="token comment"># 定义静态方法，静态方法如果有参数，就必须传实参值</span>    <span class="token keyword">def</span> <span class="token function">show_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是一个Dog类'</span><span class="token punctuation">)</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 对象.方法名()</span>dog<span class="token punctuation">.</span>show_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 类名.方法名()</span>Dog<span class="token punctuation">.</span>show_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="11多态">11.多态</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""在需要使用父类对象的地方,也可以传入子类对象,得到不同的结果 ---- 多态实现步骤:1. 子类继承父类2. 子类重写父类中的同名方法3. 定义一个共同的方法, 参数为父类对象.在方法中调用子类和父类同名的方法"""</span><span class="token comment"># 1. 定义DOg类</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'小狗</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> 在玩耍.......'</span></span><span class="token punctuation">)</span><span class="token comment"># 2. 定义哮天犬类,继承Dog类</span><span class="token keyword">class</span> <span class="token class-name">XTQ</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 3. 重写 play方法</span>    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> 在天上追云彩.....'</span></span><span class="token punctuation">)</span><span class="token comment"># 4. 定义一个共同的方法,</span><span class="token keyword">def</span> <span class="token function">play_with_dog</span><span class="token punctuation">(</span>obj_dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    obj_dog<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建Dog类对象@</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'大黄'</span><span class="token punctuation">)</span>play_with_dog<span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token comment"># 创建一个XTQ类的对象</span>xtq <span class="token operator">=</span> XTQ<span class="token punctuation">(</span><span class="token string">'小黑'</span><span class="token punctuation">)</span>play_with_dog<span class="token punctuation">(</span>xtq<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">注意：python中的多态是鸭子类型，即使不是继承关系的对象，同一方法调用也产生不同结果<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="二十一-异常">二十一、异常</span></h2><h3><span id="1异常的概念">1.异常的概念</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">异常的组成:<span class="token variable"><span class="token variable">`</span>异常类型<span class="token variable">`</span></span><span class="token builtin class-name">:</span> <span class="token variable"><span class="token variable">`</span>异常具体的描述信息<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 异常: 程序运行过程中,代码遇到错误,给出错误的提示</span><span class="token comment"># 异常不是bug，异常是程序运行过程中可能出现错误，bug是一定会出现错误</span>print<span class="token punctuation">(</span><span class="token string">'其他的代码......'</span><span class="token punctuation">)</span>num <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入一个数字:'</span><span class="token punctuation">)</span><span class="token comment"># ZeroDivisionError: division by zero</span><span class="token comment"># ValueError: invalid literal for int() with base 10: 'a'</span>num <span class="token operator">=</span> <span class="token number">10</span> / int<span class="token punctuation">(</span>num<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">'计算得到的结果是:'</span>, num<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">'其他的代码......'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2捕获单个异常">2.捕获单个异常</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 异常: 程序代码在运行过程中遇到的错误, 程序会报错,会终止程序代码的运行.</span><span class="token comment"># 异常捕获: 是指在程序代码运行过程中,遇到错误, 不让程序代码终止,让其继续运行, 同时可以给使用者一个提示信息</span><span class="token comment"># 并记录这个错误, 便于后期改进</span><span class="token triple-quoted-string string">"""try:    可能发生异常的代码except 异常的类型:    发生异常执行的代码"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'其他的代码......'</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个数字:'</span><span class="token punctuation">)</span><span class="token comment"># ZeroDivisionError: division by zero</span><span class="token comment"># ValueError: invalid literal for int() with base 10: 'a'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'计算得到的结果是:'</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你输入有误,请再次输入'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'其他的代码......'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3捕获多个异常">3.捕获多个异常</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""try:    可能发生异常的代码except (异常的类型1, 异常类型2, ...):    发生异常执行的代码"""</span><span class="token comment"># print('其他的代码......')</span><span class="token comment"># num = input('请输入一个数字:')</span><span class="token comment"># # ZeroDivisionError: division by zero</span><span class="token comment"># # ValueError: invalid literal for int() with base 10: 'a'</span><span class="token comment"># try:</span><span class="token comment">#     a = int(num)</span><span class="token comment">#     num = 10 / a</span><span class="token comment">#     print('计算得到的结果是:', num)</span><span class="token comment"># except (ZeroDivisionError, ValueError):</span><span class="token comment">#     print('你输入有误,请再次输入')</span><span class="token comment">#</span><span class="token comment"># print('其他的代码......')</span><span class="token triple-quoted-string string">"""try:    可能发生异常的代码except 异常类型1:    发生异常1,执行的代码except 异常类型2:    发生异常2,执行的代码except ...:    pass"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'其他的代码......'</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个数字:'</span><span class="token punctuation">)</span><span class="token comment"># ZeroDivisionError: division by zero</span><span class="token comment"># ValueError: invalid literal for int() with base 10: 'a'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> a    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'计算得到的结果是:'</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你输入有误,请再次输入'</span><span class="token punctuation">)</span><span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入有误,请输入数字'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'其他的代码......'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4打印异常信息">4.打印异常信息</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""try:    可能发生异常的代码except (异常的类型1, 异常类型2, ...) as 变量名:    发生异常执行的代码    print(变量名)"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'其他的代码......'</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个数字:'</span><span class="token punctuation">)</span><span class="token comment"># ZeroDivisionError: division by zero</span><span class="token comment"># ValueError: invalid literal for int() with base 10: 'a'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> a    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'计算得到的结果是:'</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token keyword">except</span> <span class="token punctuation">(</span>ZeroDivisionError<span class="token punctuation">,</span> ValueError<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你输入有误,请再次输入'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'其他的代码......'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="5捕获所有的异常">5.捕获所有的异常</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    可能发生异常的代码<span class="token keyword">except</span><span class="token punctuation">:</span>   <span class="token comment"># 缺点, 不能获取异常的描述信息</span>    发生异常执行的代码        <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token keyword">try</span><span class="token punctuation">:</span>    可能发生异常的代码<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    发生异常执行的代码    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">pass</span><span class="token comment"># Exception 是常见异常类的父类,</span>ZeroDivisionError <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> ArithmeticError <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> Exception <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> BaseException  <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">object</span>ValueError <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> Exception <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> BaseException  <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'其他的代码......'</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个数字:'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> a    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'计算得到的结果是:'</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你输入有误,请再次输入'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'其他的代码......'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="6异常的完整结构">6.异常的完整结构</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    可能发生异常的代码<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    发生异常执行的代码    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    代码没有发生异常<span class="token punctuation">,</span>会执行<span class="token keyword">finally</span><span class="token punctuation">:</span>    不管有没有发生异常<span class="token punctuation">,</span>都会执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'其他的代码......'</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个数字:'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> a    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'计算得到的结果是:'</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你输入有误,请再次输入'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'没有发生异常,我会会执行'</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不管有没有发生异常,我都会执行'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'其他的代码......'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="7异常的传递">7.异常的传递</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">是 python 异常处理的底层机制<span class="token punctuation">,</span>是原理层面上的<span class="token punctuation">,</span>不需要我们自己写代码实现<span class="token punctuation">,</span>是 python 已经实现好的<span class="token punctuation">.</span>异常传递<span class="token punctuation">:</span> 当一行代码发生异常之后<span class="token punctuation">,</span>会向外层将这个异常进行传递<span class="token punctuation">,</span>指导被捕获或者程序报错为止<span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">try</span> 嵌套<span class="token number">2</span><span class="token punctuation">.</span> 函数嵌套<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'其他的功能代码.....'</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入数字:'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># ValueError</span>    <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>  <span class="token comment"># 内层try代码发生异常，没有捕捉到，会向外层传递</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'发生异常'</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我都执行了....'</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> a    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'计算的结果&lt;&lt;</span><span class="token interpolation"><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span></span><span class="token string">>>'</span></span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'其他的功能代码.....'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="8抛出自定义异常">8.抛出自定义异常</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">程序代码为什么会报错?因为不符合语法<span class="token punctuation">,</span> 因为 python 的作者在代码中使用了 <span class="token keyword">if</span> 判断<span class="token punctuation">,</span>如果除数为 <span class="token number">0</span> <span class="token punctuation">,</span>就会在代码中抛出异常错误<span class="token punctuation">,</span>抛出异常<span class="token punctuation">:</span>    <span class="token keyword">raise</span> 异常对象  <span class="token comment"># 当程序代码遇到 raise 的时候,程序就报错了</span>    异常对象 <span class="token operator">=</span> 异常类<span class="token punctuation">(</span>参数<span class="token punctuation">)</span>  抛出自定义异常<span class="token punctuation">:</span>    <span class="token number">1</span><span class="token punctuation">.</span> 自定义异常类<span class="token punctuation">,</span>继承 Exception 或者 BaseException     <span class="token number">2</span><span class="token punctuation">.</span> 选择书写<span class="token punctuation">,</span>定义 __init__方法<span class="token punctuation">,</span>定义__str__ 方法    <span class="token number">3</span><span class="token punctuation">.</span> 在合适的时机抛出异常对象即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 定义异常类, 密码长度不足的异常</span><span class="token keyword">class</span> <span class="token class-name">PasswordLengthError</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 继承父类的方法</span>    <span class="token comment"># def __str__(self):</span>    <span class="token comment">#     return 'xxxxxx'</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">get_password</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 等同于系统定义函数</span>    password <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入密码:'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'密码长度合格'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># 抛出异常</span>        <span class="token keyword">raise</span> PasswordLengthError<span class="token punctuation">(</span><span class="token string">'密码长度不足8位'</span><span class="token punctuation">)</span>  <span class="token comment"># 异常对象</span>        <span class="token comment"># print('密码长度不足8位')</span><span class="token keyword">try</span><span class="token punctuation">:</span>    get_password<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 调用系统的函数</span><span class="token keyword">except</span> PasswordLengthError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token comment"># 异常类的__str__()方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'其他代码.....'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="二十二-模块">二十二、模块</span></h2><h3><span id="1模块概念与制作">1.模块概念与制作</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> randomrandom<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  产生<span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> 之间的随机整数<span class="token punctuation">,</span> 包含 b的<span class="token keyword">import</span> os python 就是一个 python 代码文件<span class="token punctuation">,</span>是别人已经写好的代码文件<span class="token punctuation">,</span>文件中的函数类以及变量<span class="token punctuation">,</span>我们都可以使用<span class="token punctuation">.</span>使用模块的好处<span class="token punctuation">:</span>  直接使用别人已经实现好的功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">模块就是一个 python 文件制作一个模块<span class="token punctuation">,</span>其实就是定义一个 python 代码文件注意点<span class="token punctuation">:</span> 模块的名字要遵循标识符的规则<span class="token punctuation">(</span>由字母<span class="token punctuation">,</span>数字和下划线组成<span class="token punctuation">,</span>不能以数字开头<span class="token punctuation">)</span>    模块中可以定义变量<span class="token punctuation">,</span>定义函数<span class="token punctuation">,</span>定义类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2模块的导入">2.模块的导入</span></h3><pre class="line-numbers language-none"><code class="language-none">想要使用模块中的内容,必须先导入模块 注意点: 如果导入的是自己书写的模块,使用的模块和代码文件需要在一个目录中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 想要使用模块中的内容,必须先导入模块</span><span class="token comment"># 方法一  import 模块名</span><span class="token comment"># 使用:  模块名.功能名</span><span class="token comment"># import my_module1</span><span class="token comment">#</span><span class="token comment"># print(my_module1.num)  # 使用my_module1中的变量num</span><span class="token comment"># my_module1.func()   # 调用my_module1中 func函数</span><span class="token comment"># dog = my_module1.Dog()  # 调用my_module1中的类创建对象</span><span class="token comment"># dog.show_info()</span><span class="token comment"># 方法二  from 模块名 import 功能名1, 功能名2, ....</span><span class="token comment"># 使用: 功能名</span><span class="token comment"># 注意点: 如果存在同名的方法名,则会被覆盖</span><span class="token comment"># from my_module2 import func, num</span><span class="token comment"># from my_module1 import num</span><span class="token comment"># func()</span><span class="token comment"># print(num)</span><span class="token comment"># 方法三  from 模块名 import *   # 将模块中所有的功能进行导入</span><span class="token comment"># 使用: 功能名</span><span class="token comment"># from my_module2 import *</span><span class="token comment">#</span><span class="token comment"># print(num)</span><span class="token comment"># func()</span><span class="token comment"># dog = Dog()</span><span class="token comment"># dog.show_info()</span><span class="token comment"># as 起别名.可以对模块和功能起别名,</span><span class="token comment"># 注意: 如果使用as别名,就不能再使用原来的名字</span><span class="token keyword">import</span> my_module1 <span class="token keyword">as</span> mm1<span class="token keyword">from</span> my_module1 <span class="token keyword">import</span> func <span class="token keyword">as</span> m1_func<span class="token keyword">from</span> my_module2 <span class="token keyword">import</span> func <span class="token keyword">as</span> m2_funcmm1<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span>m1_func<span class="token punctuation">(</span><span class="token punctuation">)</span>m2_func<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3模块中的变量-__all__">3.模块中的变量 <code>__all__</code></span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""__all__ 变量,可以在每个代码文件中(模块中)定义, 类型是元组,列表作用: 影响 form 模块名 import * 导入行为,另外两种导入行为不受影响1. 如果没有定义__all__ 变量, 模块中的所有功能,都可以被导入2. 如果定义__all__ 变量,只能导入 变量中定义的内容"""</span><span class="token keyword">from</span> my_module3 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 会报错</span>dog<span class="token punctuation">.</span>show_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4模块中的变量-__name__">4.模块中的变量 <code>__name__</code></span></h3><p><img src="https://i.loli.net/2021/02/22/H6uRyJImNrd3VjZ.png"></p><h3><span id="5模块的注意点">5.模块的注意点</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 自己定义的模块名字,不要和系统中你要使用的模块名字相同</span><span class="token keyword">import</span> random<span class="token keyword">import</span> sys<span class="token comment"># 模块的搜索顺序, 当前目录  ---> 系统目录 ---> 程序报错</span><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span>a <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="6包">6.包</span></h3><pre class="line-numbers language-none"><code class="language-none">包: 功能相近或者相似的模块放在一个目录中,并在目录中定义一个 __init__.py 文件,这个目录就是包<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 包的导入</span><span class="token comment"># 方法一  import 包名.模块名</span><span class="token comment"># import my_package.my_module1</span><span class="token comment"># import my_package.my_module2 as mm2</span><span class="token comment">#</span><span class="token comment"># my_package.my_module1.func()</span><span class="token comment"># mm2.func()</span><span class="token comment"># 方法2  from 包名.模块名 import 功能名</span><span class="token comment"># from my_package.my_module1 import func</span><span class="token comment"># from my_package.my_module2 import *</span><span class="token comment"># func()</span><span class="token comment"># 方法三 from 包名 import *  # 导入的是__init__.py中的内容</span><span class="token keyword">from</span> my_package <span class="token keyword">import</span> <span class="token operator">*</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="二十三-补充">二十三、补充</span></h2><h3><span id="一-f-string">一、f-string</span></h3><h4><span id="简单使用">简单使用</span></h4><p>f-string，亦称为格式化字符串常量（formatted string literals），是Python3.6新引入的一种字符串格式化方法，该方法源于<a href="https://python.org/dev/peps/pep-0498/">PEP 498 – Literal String Interpolation</a>，主要目的是使格式化字符串的操作更加简便。f-string在形式上是以 <code>f</code> 或 <code>F</code> 修饰符引领的字符串（<code>f&#39;xxx&#39;</code> 或 <code>F&#39;xxx&#39;</code>），以大括号 <code>&#123;&#125;</code> 标明被替换的字段。</p><p>f-string用大括号 <code>&#123;&#125;</code> 表示被替换字段，其中直接填入替换内容：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">'Eric'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'Hello, my name is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token string">'Hello, my name is Eric'</span><span class="token operator">>></span><span class="token operator">></span> number <span class="token operator">=</span> <span class="token number">7</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'My lucky number is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>number<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token string">'My lucky number is 7'</span><span class="token operator">>></span><span class="token operator">></span> price <span class="token operator">=</span> <span class="token number">19.99</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'The price of this book is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>price<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token string">'The price of this book is 19.99'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="表达式求值与函数调用">表达式求值与函数调用</span></h4><p>f-string的大括号 <code>&#123;&#125;</code> 可以填入表达式或调用函数，Python会求出其结果并填入返回的字符串内。</p><h4><span id="引号-大括号与反斜杠">引号、大括号与反斜杠</span></h4><p>f-string大括号内所用的引号不能和大括号外的引号定界符冲突，可根据情况灵活切换 <code>&#39;</code> 和 <code>&quot;</code>，若 <code>&#39;</code> 和 <code>&quot;</code> 不足以满足要求，还可以使用 <code>&#39;&#39;&#39;</code> 和 <code>&quot;&quot;&quot;</code>。<br>大括号外的引号还可以使用 <code>\</code> 转义，但大括号内不能使用 <code>\</code> 转义。<br>f-string大括号外如果需要显示大括号，则应输入连续两个大括号 <code>&#123;&#123;` 和 `&#125;&#125;</code>。<br>上面提到，f-string大括号内不能使用 <code>\</code> 转义，事实上不仅如此，f-string大括号内根本就不允许出现 <code>\</code>。如果确实需要 <code>\</code>，则应首先将包含 <code>\</code> 的内容用一个变量表示，再在f-string大括号内填入变量名。</p><h4><span id="多行f-string">多行f-string</span></h4><p>f-string还可用于多行字符串：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">'Eric'</span><span class="token operator">>></span><span class="token operator">></span> age <span class="token operator">=</span> <span class="token number">27</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f"Hello!"</span></span> \<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token string-interpolation"><span class="token string">f"I'm </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">."</span></span> \<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token string-interpolation"><span class="token string">f"I'm </span><span class="token interpolation"><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token string">"Hello!I'm Eric.I'm 27."</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f"""Hello!...     I'm </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">....     I'm </span><span class="token interpolation"><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span></span><span class="token string">."""</span></span><span class="token string">"Hello!\n    I'm Eric.\n    I'm 27."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="自定义格式对齐-宽度-符号-补零-精度-进制等">自定义格式：对齐、宽度、符号、补零、精度、进制等</span></h4><p>f-string采用 <code>&#123;content:format&#125;</code> 设置字符串格式，其中 <code>content</code> 是替换并填入字符串的内容，可以是变量、表达式或函数等，<code>format</code> 是格式描述符。采用默认格式时不必指定 <code>&#123;:format&#125;</code>，如上面例子所示只写 <code>&#123;content&#125;</code> 即可。</p><h5><span id="对齐相关格式描述符"><strong>对齐</strong>相关格式描述符</span></h5><table><thead><tr><th>格式描述符</th><th>含义与作用</th></tr></thead><tbody><tr><td><code>&lt;</code></td><td>左对齐（字符串默认对齐方式）</td></tr><tr><td><code>&gt;</code></td><td>右对齐（数值默认对齐方式）</td></tr><tr><td><code>^</code></td><td>居中</td></tr></tbody></table><h5><span id="数字符号相关格式描述符"><strong>数字符号</strong>相关格式描述符</span></h5><table><thead><tr><th>格式描述符</th><th>含义与作用</th></tr></thead><tbody><tr><td><code>+</code></td><td>负数前加负号（<code>-</code>），正数前加正号（<code>+</code>）</td></tr><tr><td><code>-</code></td><td>负数前加负号（<code>-</code>），正数前不加任何符号（默认）</td></tr><tr><td>``（空格）</td><td>负数前加负号（<code>-</code>），正数前加一个空格</td></tr></tbody></table><p>注：仅适用于数值类型。</p><h5><span id="数字显示方式相关格式描述符"><strong>数字显示方式</strong>相关格式描述符</span></h5><table><thead><tr><th>格式描述符</th><th>含义与作用</th></tr></thead><tbody><tr><td><code>#</code></td><td>切换数字显示方式</td></tr></tbody></table><p>注1：仅适用于数值类型。<br>注2：<code>#</code> 对不同数值类型的作用效果不同，详见下表：</p><table><thead><tr><th>数值类型</th><th>不加<code>#</code>（默认）</th><th>加<code>#</code></th><th>区别</th></tr></thead><tbody><tr><td>二进制整数</td><td><code>&#39;1111011&#39;</code></td><td><code>&#39;0b1111011&#39;</code></td><td>开头是否显示 <code>0b</code></td></tr><tr><td>八进制整数</td><td><code>&#39;173&#39;</code></td><td><code>&#39;0o173&#39;</code></td><td>开头是否显示 <code>0o</code></td></tr><tr><td>十进制整数</td><td><code>&#39;123&#39;</code></td><td><code>&#39;123&#39;</code></td><td>无区别</td></tr><tr><td>十六进制整数（小写字母）</td><td><code>&#39;7b&#39;</code></td><td><code>&#39;0x7b&#39;</code></td><td>开头是否显示 <code>0x</code></td></tr><tr><td>十六进制整数（大写字母）</td><td><code>&#39;7B&#39;</code></td><td><code>&#39;0X7B&#39;</code></td><td>开头是否显示 <code>0X</code></td></tr></tbody></table><h5><span id="宽度与精度相关格式描述符"><strong>宽度与精度</strong>相关格式描述符</span></h5><table><thead><tr><th>格式描述符</th><th>含义与作用</th></tr></thead><tbody><tr><td><code>width</code></td><td>整数 <code>width</code> 指定宽度</td></tr><tr><td><code>0width</code></td><td>整数 <code>width</code> 指定宽度，开头的 <code>0</code> 指定高位用 <code>0</code> 补足宽度</td></tr><tr><td><code>width.precision</code></td><td>整数 <code>width</code> 指定宽度，整数 <code>precision</code> 指定显示精度</td></tr></tbody></table><p>注1：<code>0width</code> 不可用于复数类型和非数值类型，<code>width.precision</code> 不可用于整数类型。<br>注2：<code>width.precision</code> 用于不同格式类型的浮点数、复数时的含义也不同：用于 <code>f</code>、<code>F</code>、<code>e</code>、<code>E</code> 和 <code>%</code> 时 <code>precision</code> 指定的是小数点后的位数，用于 <code>g</code> 和 <code>G</code> 时 <code>precision</code> 指定的是有效数字位数（小数点前位数+小数点后位数）。<br>注3：<code>width.precision</code> 除浮点数、复数外还可用于字符串，此时 <code>precision</code> 含义是只使用字符串中前 <code>precision</code> 位字符。</p><h5><span id="示例">示例：</span></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">123.456</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'a is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">:</span><span class="token format-spec">8.2f</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token string">'a is   123.46'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'a is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">:</span><span class="token format-spec">08.2f</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token string">'a is 00123.46'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'a is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">:</span><span class="token format-spec">8.2e</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token string">'a is 1.23e+02'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'a is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">:</span><span class="token format-spec">8.2%</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token string">'a is 12345.60%'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'a is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">:</span><span class="token format-spec">8.2g</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token string">'a is  1.2e+02'</span><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f's is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token format-spec">8s</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token string">'s is hello   '</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f's is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token format-spec">8.3s</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token string">'s is hel     '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="千位分隔符相关格式描述符"><strong>千位分隔符</strong>相关格式描述符</span></h5><table><thead><tr><th>格式描述符</th><th>含义与作用</th></tr></thead><tbody><tr><td><code>,</code></td><td>使用<code>,</code>作为千位分隔符</td></tr><tr><td><code>_</code></td><td>使用<code>_</code>作为千位分隔符</td></tr></tbody></table><p>注1：若不指定 <code>,</code> 或 <code>_</code>，则f-string不使用任何千位分隔符，此为默认设置。<br>注2：<code>,</code> 仅适用于浮点数、复数与十进制整数：对于浮点数和复数，<code>,</code> 只分隔小数点前的数位。<br>注3：<code>_</code> 适用于浮点数、复数与二、八、十、十六进制整数：对于浮点数和复数，<code>_</code> 只分隔小数点前的数位；对于二、八、十六进制整数，固定从低位到高位每隔四位插入一个 <code>_</code>（十进制整数是每隔三位插入一个 <code>_</code>）。</p><h5><span id="示例">示例：</span></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">1234567890.098765</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'a is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">:</span><span class="token format-spec">f</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token string">'a is 1234567890.098765'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'a is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">:</span><span class="token format-spec">,f</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token string">'a is 1,234,567,890.098765'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'a is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">:</span><span class="token format-spec">_f</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token string">'a is 1_234_567_890.098765'</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token number">1234567890</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'b is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">:</span><span class="token format-spec">_b</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token string">'b is 100_1001_1001_0110_0000_0010_1101_0010'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'b is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">:</span><span class="token format-spec">_o</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token string">'b is 111_4540_1322'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'b is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">:</span><span class="token format-spec">_d</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token string">'b is 1_234_567_890'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'b is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">:</span><span class="token format-spec">_x</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token string">'b is 4996_02d2'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="格式类型相关格式描述符"><strong>格式类型</strong>相关格式描述符</span></h5><p>基本格式类型</p><table><thead><tr><th>格式描述符</th><th>含义与作用</th><th>适用变量类型</th></tr></thead><tbody><tr><td><code>s</code></td><td>普通字符串格式</td><td>字符串</td></tr><tr><td><code>b</code></td><td>二进制整数格式</td><td>整数</td></tr><tr><td><code>c</code></td><td>字符格式，按unicode编码将整数转换为对应字符</td><td>整数</td></tr><tr><td><code>d</code></td><td>十进制整数格式</td><td>整数</td></tr><tr><td><code>o</code></td><td>八进制整数格式</td><td>整数</td></tr><tr><td><code>x</code></td><td>十六进制整数格式（小写字母）</td><td>整数</td></tr><tr><td><code>X</code></td><td>十六进制整数格式（大写字母）</td><td>整数</td></tr><tr><td><code>e</code></td><td>科学计数格式，以 <code>e</code> 表示 <code>×10^</code></td><td>浮点数、复数、整数（自动转换为浮点数）</td></tr><tr><td><code>E</code></td><td>与 <code>e</code> 等价，但以 <code>E</code> 表示 <code>×10^</code></td><td>浮点数、复数、整数（自动转换为浮点数）</td></tr><tr><td><code>f</code></td><td>定点数格式，默认精度（<code>precision</code>）是6</td><td>浮点数、复数、整数（自动转换为浮点数）</td></tr><tr><td><code>F</code></td><td>与 <code>f</code> 等价，但将 <code>nan</code> 和 <code>inf</code> 换成 <code>NAN</code> 和 <code>INF</code></td><td>浮点数、复数、整数（自动转换为浮点数）</td></tr><tr><td><code>g</code></td><td>通用格式，小数用 <code>f</code>，大数用 <code>e</code></td><td>浮点数、复数、整数（自动转换为浮点数）</td></tr><tr><td><code>G</code></td><td>与 <code>G</code> 等价，但小数用 <code>F</code>，大数用 <code>E</code></td><td>浮点数、复数、整数（自动转换为浮点数）</td></tr><tr><td><code>%</code></td><td>百分比格式，数字自动乘上100后按 <code>f</code> 格式排版，并加 <code>%</code> 后缀</td><td>浮点数、整数（自动转换为浮点数）</td></tr></tbody></table><p>常用的特殊格式类型：<a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior">标准库 <code>datetime</code></a> 给定的用于排版时间信息的格式类型，适用于 <a href="https://docs.python.org/3/library/datetime.html#date-objects"><code>date</code></a>、<a href="https://docs.python.org/3/library/datetime.html#datetime-objects"><code>datetime</code></a> 和 <a href="https://docs.python.org/3/library/datetime.html#time-objects"><code>time</code></a> 对象</p><table><thead><tr><th>格式描述符</th><th>含义</th><th>显示样例</th></tr></thead><tbody><tr><td><code>%a</code></td><td>星期几（缩写）</td><td><code>&#39;Sun&#39;</code></td></tr><tr><td><code>%A</code></td><td>星期几（全名）</td><td><code>&#39;Sunday&#39;</code></td></tr><tr><td><code>%w</code></td><td>星期几（数字，<code>0</code> 是周日，<code>6</code> 是周六）</td><td><code>&#39;0&#39;</code></td></tr><tr><td><code>%u</code></td><td>星期几（数字，<code>1</code> 是周一，<code>7</code> 是周日）</td><td><code>&#39;7&#39;</code></td></tr><tr><td><code>%d</code></td><td>日（数字，以 <code>0</code> 补足两位）</td><td><code>&#39;07&#39;</code></td></tr><tr><td><code>%b</code></td><td>月（缩写）</td><td><code>&#39;Aug&#39;</code></td></tr><tr><td><code>%B</code></td><td>月（全名）</td><td><code>&#39;August&#39;</code></td></tr><tr><td><code>%m</code></td><td>月（数字，以 <code>0</code> 补足两位）</td><td><code>&#39;08&#39;</code></td></tr><tr><td><code>%y</code></td><td>年（后两位数字，以 <code>0</code> 补足两位）</td><td><code>&#39;14&#39;</code></td></tr><tr><td><code>%Y</code></td><td>年（完整数字，不补零）</td><td><code>&#39;2014&#39;</code></td></tr><tr><td><code>%H</code></td><td>小时（24小时制，以 <code>0</code> 补足两位）</td><td><code>&#39;23&#39;</code></td></tr><tr><td><code>%I</code></td><td>小时（12小时制，以 <code>0</code> 补足两位）</td><td><code>&#39;11&#39;</code></td></tr><tr><td><code>%p</code></td><td>上午/下午</td><td><code>&#39;PM&#39;</code></td></tr><tr><td><code>%M</code></td><td>分钟（以 <code>0</code> 补足两位）</td><td><code>&#39;23&#39;</code></td></tr><tr><td><code>%S</code></td><td>秒钟（以 <code>0</code> 补足两位）</td><td><code>&#39;56&#39;</code></td></tr><tr><td><code>%f</code></td><td>微秒（以 <code>0</code> 补足六位）</td><td><code>&#39;553777&#39;</code></td></tr><tr><td><code>%z</code></td><td>UTC偏移量（格式是 <code>±HHMM[SS]</code>，未指定时区则返回空字符串）</td><td><code>&#39;+1030&#39;</code></td></tr><tr><td><code>%Z</code></td><td>时区名（未指定时区则返回空字符串）</td><td><code>&#39;EST&#39;</code></td></tr><tr><td><code>%j</code></td><td>一年中的第几天（以 <code>0</code> 补足三位）</td><td><code>&#39;195&#39;</code></td></tr><tr><td><code>%U</code></td><td>一年中的第几周（以全年首个周日后的星期为第0周，以 <code>0</code> 补足两位）</td><td><code>&#39;27&#39;</code></td></tr><tr><td><code>%w</code></td><td>一年中的第几周（以全年首个周一后的星期为第0周，以 <code>0</code> 补足两位）</td><td><code>&#39;28&#39;</code></td></tr><tr><td><code>%V</code></td><td>一年中的第几周（以全年首个包含1月4日的星期为第1周，以 <code>0</code> 补足两位）</td><td><code>&#39;28&#39;</code></td></tr></tbody></table><h5><span id="综合示例">综合示例</span></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">1234</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'a is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">:</span><span class="token format-spec">^#10X</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>      <span class="token comment"># 居中，宽度10位，十六进制整数（大写字母），显示0X前缀</span><span class="token string">'a is   0X4D2   '</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token number">1234.5678</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'b is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">:</span><span class="token format-spec">&lt;+10.2f</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>    <span class="token comment"># 左对齐，宽度10位，显示正号（+），定点数格式，2位小数</span><span class="token string">'b is +1234.57  '</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token number">12345678</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'c is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">:</span><span class="token format-spec">015,d</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>      <span class="token comment"># 高位补零，宽度15位，十进制整数，使用,作为千分分割位</span><span class="token string">'c is 000,012,345,678'</span><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">+</span> <span class="token number">2.5j</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'd is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>d<span class="token punctuation">:</span><span class="token format-spec">30.3e</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>      <span class="token comment"># 宽度30位，科学计数法，3位小数</span><span class="token string">'d is           5.000e-01+2.500e+00j'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> datetime<span class="token operator">>></span><span class="token operator">></span> e <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'the time is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">:</span><span class="token operator">%</span>Y<span class="token operator">-</span><span class="token operator">%</span>m<span class="token operator">-</span><span class="token operator">%</span>d <span class="token punctuation">(</span><span class="token operator">%</span>a<span class="token punctuation">)</span> <span class="token operator">%</span>H<span class="token punctuation">:</span><span class="token operator">%</span>M<span class="token punctuation">:</span><span class="token format-spec">%S</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>   <span class="token comment"># datetime时间格式</span><span class="token string">'the time is 2018-07-14 (Sat) 20:46:02'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="二-pass占位符">二、pass占位符</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 判断条件<span class="token punctuation">:</span>    <span class="token keyword">pass</span>  <span class="token comment"># 占位,空代码 让代码不报错</span><span class="token keyword">elif</span> 判断条件<span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>循环<span class="token punctuation">:</span> 重复做一件事 <span class="token keyword">while</span>   <span class="token keyword">for</span><span class="token keyword">while</span> 判断条件<span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">for</span> i <span class="token keyword">in</span> xxx<span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="三-随机整数">三、随机整数</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random  <span class="token comment"># 导入随机数模块</span><span class="token comment"># 产生 [a, b] 之间的随机整数,包含 a 和 b</span>num <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="四-enumerate-函数">四、enumerate 函数</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token comment"># for i in my_list:</span><span class="token comment">#     print(i)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> my_list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>  <span class="token comment"># 下标, 数据值</span><span class="token comment"># enemerate 将可迭代序列中元素所在的下标和具体元素数据组合在一块,变成元组</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="五-字符串-列表-元组-字典的公共方法">五、字符串、列表、元组、字典的公共方法</span></h3><ul><li><code>+</code>  支持 字符串、列表、元组 进行操作， 得到一个新的容器</li><li><code>* 整数</code> 复制， 支持 字符串、列表、元组 进行操作， 得到一个新的容器</li><li><code>in/not in</code>  判断存在或者是不存在，支持 字符串、列表、元组、字典 进行操作， 注意： ==如果是字典的话，判断的是 key 值是否存在或不存在==</li><li><code>max/min</code> 获取 字符串、列表、元组 的最大最小值，对于字典来说，是比较的字典的 key值的大小</li><li>del 删除 字符串、列表、元组、字典 中的元素</li></ul><h3><span id="六-列表-字典推导式">六、列表、字典推导式</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 列表推导式, 为了快速的生成一个列表</span><span class="token comment"># 1. 变量 = [生成数据的规则 for 临时变量 in xxx]</span><span class="token comment"># 每循环一次,就会创建一个数据</span>my_list <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># [0, 1, 2, 3, 4]</span>my_list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list1<span class="token punctuation">)</span>my_list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'num:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> my_list<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list2<span class="token punctuation">)</span>my_list3 <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token operator">+</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list3<span class="token punctuation">)</span><span class="token comment"># 2. 变量 = [生成数据的规则 for 临时变量 in xxx if xxx]</span><span class="token comment"># 每循环一次,并且if条件为True,生成一个数据</span>my_list <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># [0, 2, 4]</span><span class="token comment"># 3. 变量 = [生成数据的规则 for 临时变量 in xxx  for j in xxx]</span><span class="token comment"># 第二个for 循环 循环一次,生成一个数据</span>my_list4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list4<span class="token punctuation">)</span><span class="token comment"># 补充: 字典推导式 </span><span class="token comment"># 变量 = &#123;生成字典的规则 for 临时变量 in xx&#125;</span><span class="token comment"># my_dict = &#123;key: value for i in range(3)&#125;</span>my_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string-interpolation"><span class="token string">f"name</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">:</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">)</span>my_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string-interpolation"><span class="token string">f"name</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">:</span> j <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">)</span>  <span class="token comment"># 3</span>my_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string-interpolation"><span class="token string">f"name</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">:</span> j <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="七-查看对象的引用计数">七、查看对象的引用计数</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getrefcount<span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 显示的时候,会比实际的多一个,</span>dog1 <span class="token operator">=</span> dog  <span class="token comment"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getrefcount<span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 显示的时候,会比实际的多一个,</span><span class="token keyword">del</span> dog  <span class="token comment"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getrefcount<span class="token punctuation">(</span>dog1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 显示的时候,会比实际的多一个,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="八-添加模块查找路径">八、添加模块查找路径</span></h3><p>当import某个模块时，解释器首先搜索具有该名称的内置模块，如果没有找到，将在变量 sys.path 给出的目录列表中搜索名为 模块名.py 的文件。sys.path 包含了一下几个目录：</p><ul><li>输入脚本的当前目录；</li><li>PYTHONPATH环境变量；</li><li>python安装时的系统目录；</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查看当前模块查找路径</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> sys<span class="token operator">>></span><span class="token operator">></span> sys<span class="token punctuation">.</span>path<span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python27.zip'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python2.7'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python2.7/plat-linux2'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python2.7/lib-tk'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python2.7/lib-old'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python2.7/lib-dynload'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python2.7/site-packages'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib/python2.7/site-packages'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>添加路径的方法：</p><p><strong>1、使用sys.path.append 临时动态添加模块的路径：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'/root/ws'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> sys<span class="token punctuation">.</span>path<span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python27.zip'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python2.7'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python2.7/plat-linux2'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python2.7/lib-tk'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python2.7/lib-old'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python2.7/lib-dynload'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python2.7/site-packages'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib/python2.7/site-packages'</span><span class="token punctuation">,</span> <span class="token string">'/root/ws'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> hello<span class="token operator">>></span><span class="token operator">></span> hello<span class="token punctuation">.</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span>hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2、修改PYTHONPATH环境变量：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">vim <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>bashrc <span class="token comment">#添加</span>export PYTHONPATH<span class="token operator">=</span>$PYTHONPATH<span class="token punctuation">:</span><span class="token operator">/</span>root<span class="token operator">/</span>ws<span class="token comment">#生效</span>source <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>bashrc <span class="token comment">#python代码中引入hello模块</span>$ pythonPython <span class="token number">2.7</span><span class="token number">.5</span> <span class="token punctuation">(</span>default<span class="token punctuation">,</span> Sep <span class="token number">15</span> <span class="token number">2016</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">:</span><span class="token number">39</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>GCC <span class="token number">4.8</span><span class="token number">.5</span> <span class="token number">20150623</span> <span class="token punctuation">(</span>Red Hat <span class="token number">4.8</span><span class="token number">.5</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span> on linux2Type <span class="token string">"help"</span><span class="token punctuation">,</span> <span class="token string">"copyright"</span><span class="token punctuation">,</span> <span class="token string">"credits"</span> <span class="token keyword">or</span> <span class="token string">"license"</span> <span class="token keyword">for</span> more information<span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> sys<span class="token operator">>></span><span class="token operator">></span> sys<span class="token punctuation">.</span>path<span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'/root'</span><span class="token punctuation">,</span> <span class="token string">'/root/ws'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python27.zip'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python2.7'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python2.7/plat-linux2'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python2.7/lib-tk'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python2.7/lib-old'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python2.7/lib-dynload'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib64/python2.7/site-packages'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib/python2.7/site-packages'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> hello<span class="token operator">>></span><span class="token operator">></span> hello<span class="token punctuation">.</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span>hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3、使用.pth文件：</strong></p><p>在/usr/lib/python2.7/site-packages 下添加一个扩展名为 .pth 的配置文件（例如：test.pth），内容为要添加的路径：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>root<span class="token operator">/</span>ws<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础（上）</title>
      <link href="2021/02/22/python-ji-chu-shang/"/>
      <url>2021/02/22/python-ji-chu-shang/</url>
      
        <content type="html"><![CDATA[<h1><span id="python基础上">python基础（上）</span></h1><h2><span id="一-注释">一、注释</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 单行注释，单行注释前一般空一格</span><span class="token triple-quoted-string string">'''多行注释'''</span><span class="token triple-quoted-string string">"""多行注释"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="二-pep-8-规范">二、PEP 8 规范</span></h2><p>1、单行注释#后边应该有一个空格</p><p>2、代码文件的最后一行是空行</p><p>3、行内注释代码末尾需要两个空格</p><h2><span id="三-变量的定义和使用">三、变量的定义和使用</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 变量: 内存地址的别名,作用, 用来存储数据的</span><span class="token comment"># 在程序中想要存储数据,就需要使用变量</span><span class="token comment"># 变量的定义:  变量名 = 数据值    变量名要遵循标识符定义规则</span><span class="token comment"># 定义一个变量 name,变量name 中存储的数据是 'isaac'</span>name <span class="token operator">=</span> <span class="token string">'isaac'</span><span class="token comment"># 定义一个变量age, 变量age中存储的数据值是 18</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token comment"># 使用变量中的值  , 直接使用变量即可</span><span class="token comment"># 使用print函数打印输出name变量中存储的数据值</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token comment"># 修改变量中的数据值  变量名 = 新的数据值</span><span class="token comment"># 将19这个数据存储到变量age中</span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="四-数据类型">四、数据类型</span></h2><p><img src="https://i.loli.net/2021/02/19/qbHRS4ABWprC9E5.png"></p><h2><span id="五-输入输出">五、输入输出</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">""</span>name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入你的名字"</span><span class="token punctuation">)</span>  <span class="token comment"># 括号内为输入提示</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"yy"</span>age <span class="token operator">=</span> <span class="token number">18.52</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am %s, %d years old"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># python3.6版本往后支持 f-string 占位， f/F" &#123;&#125; "</span><span class="token comment"># 默认有几位小数就显示几位</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"I am </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span></span><span class="token string"> years old"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"I am </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>age<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">&#125;</span></span><span class="token string"> years old"</span></span><span class="token punctuation">)</span><span class="token comment"># print()函数默认带换行 可用end = ""修改结尾符</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="六-数据类型转换">六、数据类型转换</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># type()获取数据类型</span>name <span class="token operator">=</span> <span class="token string">"yy"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 类型转换,将原始数据转换为我们需要的数据类型,在这个过程中,不会改变原始的数据,会生成一个新的数据</span><span class="token comment"># 1. 转换为int类型  int(原始数据)</span><span class="token comment"># 1.1 float类型的数据 转换为int</span>pi <span class="token operator">=</span> <span class="token number">3.14</span>num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token comment"># print(type(pi))   # float</span><span class="token comment"># print(type(num))  # int</span><span class="token comment"># 1.2 整数类型的字符串, "10"</span>my_str <span class="token operator">=</span> <span class="token string">'10'</span>num1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>my_str<span class="token punctuation">)</span><span class="token comment"># print(type(my_str))  # str</span><span class="token comment"># print(type(num1))  # int</span><span class="token comment"># 2. 转换为 float类型 float()</span><span class="token comment"># 2.1 int ---> float</span>num2 <span class="token operator">=</span> <span class="token number">10</span>num3 <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token comment"># print(type(num2))  # int</span><span class="token comment"># print(type(num3))  # float</span><span class="token comment"># 2.2 将数字类型字符串转换为 float  "10"  "3.14"</span>num4 <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">"3.14"</span><span class="token punctuation">)</span>num5 <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token comment"># print(type(num4))  # float</span><span class="token comment"># print(type(num5))  # float</span><span class="token comment"># eval()  还原原来的数据类型,  去掉字符串的引号</span>num6 <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">'100'</span><span class="token punctuation">)</span>  <span class="token comment"># 100 int</span>num7 <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">'3.14'</span><span class="token punctuation">)</span>  <span class="token comment"># 3.14 float</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>num6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>num7<span class="token punctuation">)</span><span class="token punctuation">)</span>num8 <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">'num7'</span><span class="token punctuation">)</span>  <span class="token comment"># num7  是已经定义好的变量,可以使用,不会报错</span><span class="token keyword">print</span><span class="token punctuation">(</span>num8<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>num8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># num8 = eval('hello')   # 代码报错,hello 变量没有定义,不能使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="七-运算符">七、运算符</span></h2><h3><span id="算术运算符">算术运算符</span></h3><pre class="line-numbers language-none"><code class="language-none">+ - * &#x2F; &#x2F;&#x2F; 整除(求商)% 取余数** 指数,幂运算() 可以改变优先级<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="赋值运算符">赋值运算符</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">=</span> 将等号右边的结果赋值给等号左边的变量等号左边<span class="token punctuation">,</span>必须是变量<span class="token punctuation">,</span>不能是具体的数字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="符合赋值运算符">符合赋值运算符</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">+=</span>  c<span class="token operator">+=</span>a  <span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span> c <span class="token operator">=</span> c <span class="token operator">+</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="比较运算符">比较运算符</span></h3><blockquote><p>比较运算符的结果是 bool 类型, 即 True,或者是 False</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">==</span> 判断是否相等<span class="token punctuation">,</span> 相等是 <span class="token boolean">True</span><span class="token punctuation">.</span> 不相等是 <span class="token boolean">False</span><span class="token operator">!=</span> 判断是否不相等<span class="token punctuation">,</span> 不相等是 <span class="token boolean">True</span><span class="token punctuation">,</span> 相等 <span class="token boolean">False</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">>=</span><span class="token operator">&lt;=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="逻辑运算符">逻辑运算符</span></h3><blockquote><p>逻辑运算符可以连接连个表达式, 两个表达式共同的结果决定最终的结果是 True,还是 False</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">and</span>  逻辑与<span class="token punctuation">,</span> 连接的两个条件都必须为 <span class="token boolean">True</span><span class="token punctuation">,</span>结果为 <span class="token boolean">True</span><span class="token punctuation">,</span>  一假为假如果第一个条件为 <span class="token boolean">False</span><span class="token punctuation">,</span>就不会再判断第二个条件<span class="token keyword">or</span>   逻辑或<span class="token punctuation">,</span> 连接的两个条件都为 <span class="token boolean">False</span><span class="token punctuation">,</span>结果为 <span class="token boolean">False</span><span class="token punctuation">,</span>    一真为真如果第一个条件为 <span class="token boolean">True</span><span class="token punctuation">,</span>第二个条件就不会再判断了<span class="token keyword">not</span>  逻辑非<span class="token punctuation">,</span> 取反<span class="token punctuation">,</span>原来是 <span class="token boolean">True</span><span class="token punctuation">,</span>变为 <span class="token boolean">False</span><span class="token punctuation">,</span>原来是 <span class="token boolean">False</span><span class="token punctuation">,</span>变为 <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="八-if-分支结构">八、if 分支结构</span></h2><h3><span id="if-判断的基本格式">if 判断的基本格式</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 判断条件<span class="token punctuation">:</span>    判断条件为 <span class="token boolean">True</span><span class="token punctuation">,</span>会执行的代码    判断条件为 <span class="token boolean">True</span><span class="token punctuation">,</span>会执行的代码    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>顶格书写的代码<span class="token punctuation">,</span>代表和 <span class="token keyword">if</span> 判断没有关系在 python 中使用缩进<span class="token punctuation">,</span>代替代码的层级关系<span class="token punctuation">,</span> 在 <span class="token keyword">if</span> 语句的缩进内<span class="token punctuation">,</span>属于 <span class="token keyword">if</span> 语句的代码块<span class="token punctuation">(</span>多行代码的意思<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="if-else-结构">if else 结构</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 判断条件<span class="token punctuation">:</span>    判断条件为 <span class="token boolean">True</span><span class="token punctuation">,</span>会执行的代码    判断条件为 <span class="token boolean">True</span><span class="token punctuation">,</span>会执行的代码    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span><span class="token punctuation">:</span>    判断条件为 <span class="token boolean">False</span><span class="token punctuation">,</span> 会执行的代码    判断条件为 <span class="token boolean">False</span><span class="token punctuation">,</span> 会执行的代码    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="if-elif-结构">if elif 结构</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 判断条件<span class="token number">1</span><span class="token punctuation">:</span>    判断条件<span class="token number">1</span>成立<span class="token punctuation">,</span>执行的代码<span class="token keyword">elif</span> 判断条件<span class="token number">2</span><span class="token punctuation">:</span>    判断条件<span class="token number">1</span>不成立<span class="token punctuation">,</span>判断条件<span class="token number">2</span> 成立<span class="token punctuation">,</span>会执行的代码<span class="token keyword">else</span><span class="token punctuation">:</span>    判断条件<span class="token number">1</span>和判断条件<span class="token number">2</span>都不成立<span class="token punctuation">,</span>执行的代码    <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">if</span> 判断条件<span class="token number">1</span><span class="token punctuation">:</span>    判断条件<span class="token number">1</span>成立执行的代码    <span class="token keyword">if</span> 判断条件<span class="token number">2</span><span class="token punctuation">:</span>    判断条件<span class="token number">2</span> 成立执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="if-嵌套">if 嵌套</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 判断条件<span class="token number">1</span><span class="token punctuation">:</span>    判断条件<span class="token number">1</span> 成立<span class="token punctuation">,</span>会执行的代码    <span class="token keyword">if</span> 判断条件<span class="token number">2</span><span class="token punctuation">:</span>        判断条件<span class="token number">1</span>成立<span class="token punctuation">,</span> 判断条件<span class="token number">2</span>成立执行的代码    <span class="token keyword">else</span><span class="token punctuation">:</span>        判断条件<span class="token number">1</span>成立<span class="token punctuation">,</span> 判断条件<span class="token number">2</span>不成立执行的代码<span class="token keyword">else</span><span class="token punctuation">:</span>    判断条件<span class="token number">1</span>不成立<span class="token punctuation">,</span>会执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="三目运算">三目运算</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 判断条件<span class="token number">1</span><span class="token punctuation">:</span>    表达式<span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    表达式<span class="token number">2</span>    判断条件成立<span class="token punctuation">,</span>执行表达式 <span class="token number">1</span><span class="token punctuation">,</span> 条件不成立<span class="token punctuation">,</span>执行表达式 <span class="token number">2</span>变量 <span class="token operator">=</span> 表达式<span class="token number">1</span> <span class="token keyword">if</span> 判断条件 <span class="token keyword">else</span> 表达式<span class="token number">2</span>  <span class="token comment"># 推荐使用扁平化代码</span>变量最终存储的结构是<span class="token punctuation">:</span>     判断条件成立<span class="token punctuation">,</span>表达式<span class="token number">1</span>的值<span class="token punctuation">,</span>     条件不成立<span class="token punctuation">,</span>表达式<span class="token number">2</span>的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="例">例：</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag1 <span class="token operator">=</span> <span class="token boolean">True</span>flag2 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> flag1<span class="token punctuation">:</span>    <span class="token keyword">if</span> flag2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> flag2 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"other"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"False"</span><span class="token punctuation">)</span>ans <span class="token operator">=</span> <span class="token string">"one"</span> <span class="token keyword">if</span> flag1 <span class="token keyword">else</span> <span class="token string">"two"</span><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="九-while循环结构">九、while循环结构</span></h2><h3><span id="while-判断的基本格式">while 判断的基本格式</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> 判断条件<span class="token punctuation">:</span>    判断条件成立<span class="token punctuation">,</span>执行的代码    判断条件成立<span class="token punctuation">,</span>执行的代码    不在 <span class="token keyword">while</span> 的缩进内<span class="token punctuation">,</span>代表和循环没有关系    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="while-嵌套">while 嵌套</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> 判断条件<span class="token number">1</span><span class="token punctuation">:</span>    代码<span class="token number">1</span>    <span class="token keyword">while</span> 判断条件<span class="token number">2</span><span class="token punctuation">:</span>        代码<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="十-for-循环结构">十、for 循环结构</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 字符串<span class="token punctuation">:</span>    代码<span class="token keyword">for</span> 循环也称为 <span class="token keyword">for</span> 遍历<span class="token punctuation">,</span>会将字符串中的字符全部取到    <span class="token keyword">for</span> 变量 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># range()定义遍历的范围</span>    代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">'hello'</span><span class="token punctuation">:</span>    <span class="token comment"># i 一次循环是字符串中的一个字符</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token comment"># range(n)  会生成 [0, n) 的数据序列, 不包含n</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 0 1 2 3 4</span>    <span class="token comment"># print(i)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'操场跑圈...'</span><span class="token punctuation">)</span><span class="token comment"># range(a, b)  会生成 [a, b) 的整数序列, 不包含b</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 3 4 5 6</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment"># range(a, b, step) 会生成[a, b) 的整数序列,但是每个数字之间的间隔(步长)是step</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 1 4  7</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="十一-break-和-continue">十一、break 和 continue</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">break</span> 和 <span class="token keyword">continue</span> 是 python 两个关键字<span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">break</span> 和 <span class="token keyword">continue</span> 只能用在循环中<span class="token number">3</span><span class="token punctuation">.</span> <span class="token keyword">break</span> 是终止循环的执行<span class="token punctuation">,</span> 即循环代码遇到 <span class="token keyword">break</span><span class="token punctuation">,</span>就不再循环了   <span class="token keyword">continue</span> 是结束本次循环<span class="token punctuation">,</span>继续下一次循环<span class="token punctuation">,</span> 即本次循环剩下的代码不再执行<span class="token punctuation">,</span>但会进行下一次循环<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="十二-循环-else-结构">十二、循环 else 结构</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> xx<span class="token punctuation">:</span>    <span class="token keyword">if</span> xxx<span class="token punctuation">:</span>        xx  <span class="token comment"># if 判断条件成立会执行</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        xxx  <span class="token comment"># if 判断条件不成立,会执行</span><span class="token keyword">else</span><span class="token punctuation">:</span>    xxx  <span class="token comment"># for 循环代码运行结束,但是不是被 break 终止的时候会执行</span>    需求<span class="token punctuation">:</span>    有一个字符串 <span class="token string">'hello python'</span><span class="token punctuation">,</span> 想要判断这个字符串中有没有包含 p 这个字符<span class="token punctuation">,</span>如果包含<span class="token punctuation">,</span>就输出<span class="token punctuation">,</span> 包含 p<span class="token punctuation">,</span> 如果没有 p <span class="token punctuation">,</span>就输出<span class="token punctuation">,</span>不包含<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="十三-字符串">十三、字符串</span></h2><h3><span id="1字符串的定义">1.字符串的定义</span></h3><p>1.带引号的内容就是字符串.</p><p>2.在 python 中,字符串可以乘上一个整数,<br>字符串 * num</p><p><img src="https://i.loli.net/2021/02/20/yKh4Sfo2FTUJlqe.png"></p><p><img src="https://i.loli.net/2021/02/20/6ijPHJY97Uvehas.png"></p><h3><span id="2字符串的输出和输出">2.字符串的输出和输出</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 输入 input()</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 函数得到的内容就是字符串<span class="token comment"># 输出 print() 函数 %s </span>f<span class="token operator">-</span>string <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3下标">3.下标</span></h3><p><img src="https://i.loli.net/2021/02/20/AJm73jrS91wpvBW.png"></p><h3><span id="4切片">4.切片</span></h3><p>my_str[:]  得到和原来一样的字符串<br>my_str[::-1]  字符串的逆置</p><p><img src="https://i.loli.net/2021/02/20/7zJN9nISCOrGg1Y.png"></p><p><img src="https://i.loli.net/2021/02/20/eIMbsr4BAdgGCOX.png"></p><h3><span id="5子串查找">5.子串查找</span></h3><p><strong>find() &amp; rfind()</strong></p><p><img src="https://i.loli.net/2021/02/20/ZHyOReBsma6xTLv.png"></p><p><strong>index &amp; rindex()</strong></p><p><img src="https://i.loli.net/2021/02/20/mf4NoPzaqAOZnCy.png"></p><h3><span id="6子串统计">6.子串统计</span></h3><p><strong>count()</strong></p><p><img src="https://i.loli.net/2021/02/20/C3mcMNxGS6ondhu.png"></p><h3><span id="7字符串替换方法-replace">7.字符串替换方法 replace</span></h3><p><img src="https://i.loli.net/2021/02/20/eZH8y7gRozafQrO.png"></p><h3><span id="8字符串分隔-split">8.字符串分隔 split()</span></h3><p><img src="https://i.loli.net/2021/02/20/JTgrp2qBVCj3vRm.png"></p><h3><span id="9字符串连接-join">9.字符串连接 join()</span></h3><p><img src="https://i.loli.net/2021/02/20/zO132ehu9qvnL75.png"></p><h2><span id="十四-列表">十四、列表</span></h2><h3><span id="1列表的定义和基本使用">1.列表的定义和基本使用</span></h3><p><img src="https://i.loli.net/2021/02/20/hUCQDyO1luEdk3v.png"></p><p><img src="https://i.loli.net/2021/02/20/qxTwugpSWEGtAoC.png"></p><h3><span id="2向列表中添加数据">2.向列表中添加数据</span></h3><p><img src="https://i.loli.net/2021/02/20/uVQtJlqD3zUYn9p.png"></p><h3><span id="3-列表中的数据查询操作">3. 列表中的数据查询操作</span></h3><p><img src="https://i.loli.net/2021/02/20/2Tn4zJZpDWLvCyk.png"></p><h3><span id="4列表中的删除操作">4.列表中的删除操作</span></h3><p><img src="https://i.loli.net/2021/02/20/f5Oh4PEGYliw2Q3.png"></p><h3><span id="5列表排序和逆置">5.列表排序和逆置</span></h3><p><img src="https://i.loli.net/2021/02/20/x9I6ZSJNhYnXtrm.png"></p><h3><span id="6列表嵌套">6.列表嵌套</span></h3><p><img src="https://i.loli.net/2021/02/20/w5guaNH8d2MZh3p.png"></p><h2><span id="十五-元组">十五、元组</span></h2><p><img src="https://i.loli.net/2021/02/20/6QXLPO4epCJN2xv.png"></p><h2><span id="十六-字典">十六、字典</span></h2><h3><span id="1字典的定义和访问">1.字典的定义和访问</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 字典 dict 定义使用&#123;&#125; 定义, 是由键值对组成(key-value)</span><span class="token comment"># 变量 = &#123;key1: value1, key2:value2, ...&#125;  一个key:value 键值对是一个元素</span><span class="token comment"># 字典的key 可以是 字符串类型和数字类型(int  float), 不能是 列表</span><span class="token comment"># value值可以是任何类型</span><span class="token comment"># 1. 定义空字典</span>my_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>my_dict1 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict1<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>my_dict1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 2. 定义带数据的字典</span>my_dict2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'isaac'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'like'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'学习'</span><span class="token punctuation">,</span> <span class="token string">'购物'</span><span class="token punctuation">,</span> <span class="token string">'游戏'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict2<span class="token punctuation">)</span><span class="token comment"># 3. 访问value 值, 在字典中没有下标的概念, 使用 key值访问对应的value 值</span><span class="token comment"># 18</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict2<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># '购物'</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict2<span class="token punctuation">[</span><span class="token string">'like'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 如果key值不存在</span><span class="token comment"># print(my_dict2['gender'])  # 代码报错,key值不存在</span><span class="token comment"># 字典.get(key)  如果key值不存在,不会报错,返回的是None</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict2<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'gender'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># my_dict2.get(key, 数据值)   如果key存在,返回key对应的value值,如果key不存在,返回书写的数据值值</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict2<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'gender'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 男</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict2<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 18</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>my_dict2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2字典中添加和修改数据">2.字典中添加和修改数据</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'isaac'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">)</span><span class="token comment"># 字典中添加和修改数据,使用key值进行添加和修改</span><span class="token comment"># 字典[key] = 数据值;   如果key值存在,就是修改,如果key值不存在,就是添加</span>my_dict<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span>  <span class="token comment"># key值不存在,添加</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">)</span>my_dict<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">19</span>  <span class="token comment"># key值已经存在,就是修改数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">)</span><span class="token comment"># 注意点 key 值 int 的 1 和float的 1.0 代表一个key值</span>my_dict<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'int'</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">)</span>my_dict<span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'float'</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3字典中删除数据">3.字典中删除数据</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'isaac'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'float'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'aa'</span><span class="token punctuation">&#125;</span><span class="token comment"># 根据key值删除数据  del 字典名[key]</span><span class="token keyword">del</span> my_dict<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">)</span><span class="token comment"># 字典.pop(key)  根据key值删除, 返回值是删除的key对应的value值</span>result <span class="token operator">=</span> my_dict<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># 字典.clear()  清空字典, 删除所有的键值对</span>my_dict<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">)</span><span class="token comment"># del 字典名   直接将这个字典删除了,不能使用这个字典了</span><span class="token keyword">del</span> my_dict  <span class="token comment"># 后边的代码不能再直接使用这个变量了,除非再次定义</span><span class="token comment"># print(my_dict)  代码报错, 变量未定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4字典中遍历数据">4.字典中遍历数据</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'isaac'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">&#125;</span><span class="token comment"># for循环体直接遍历字典, 遍历的字典的key值</span><span class="token keyword">for</span> key <span class="token keyword">in</span> my_dict<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> my_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 字典.keys() 获取字典中所有的key值, 得到的类型是 dict_keys, 该类型具有的特点是</span><span class="token comment"># 1. 可以使用list() 进行类型转换,即将其转换为列表类型</span><span class="token comment"># 2. 可以使用for循环进行遍历</span>result <span class="token operator">=</span> my_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> key <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment"># 字典.values() 获取所有的value值, 类型是 dict_values</span><span class="token comment"># 1. 可以使用list() 进行类型转换,即将其转换为列表类型</span><span class="token comment"># 2. 可以使用for循环进行遍历</span>result <span class="token operator">=</span> my_dict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> value <span class="token keyword">in</span> my_dict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token comment"># 字典.items()  获取所有的键值对, 类型是 dict_items, key,value 组成元组类型</span><span class="token comment"># 1. 可以使用list() 进行类型转换,即将其转换为列表类型</span><span class="token comment"># 2. 可以使用for循环进行遍历</span>result <span class="token operator">=</span> my_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> my_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> my_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># k 是元组中的第一个数据, v 是元组中的第二个数据</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="十七-集合">十七、集合</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 集合 set 定义使用 &#123;&#125;  , &#123;数据, 数据&#125;</span><span class="token comment"># 1. 集合中的数据必须是不可变类型</span>my_set <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_set<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>my_set<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># my_set = &#123;[1, 2]&#125;   # 代码报错</span><span class="token comment"># 2. 集合是可变类型</span>my_set<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_set<span class="token punctuation">)</span>my_set<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_set<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----'</span><span class="token punctuation">)</span>my_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_set<span class="token punctuation">)</span><span class="token comment"># 修改数据 100 ---> 200</span>my_set<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>my_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_set<span class="token punctuation">)</span>my_set<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_set<span class="token punctuation">)</span>   <span class="token comment">#</span><span class="token comment"># 3. 集合是无序的,(数据的添加顺序和输出顺序是否一致), 不支持下标操作</span><span class="token comment"># 4. 集合中的数据没有重复数据(去重)</span>my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>my_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token comment"># 集合, 列表, 元组 三者之间可以互相转换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络的分类</title>
      <link href="2021/02/19/ji-suan-ji-wang-luo-de-fen-lei-tuo-bu-jie-gou/"/>
      <url>2021/02/19/ji-suan-ji-wang-luo-de-fen-lei-tuo-bu-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1><span id="计算机网络的分类">计算机网络的分类</span></h1><p><img src="https://i.loli.net/2021/02/19/f1yCL3sQlhqo2FR.jpg"></p><p>注：</p><p>总线型结构中，所有节点都通过总线收发信息。<br>星型结构的中心节点故障会使整个网络瘫痪。<br>环型结构的单点故障则不会影响整个网络。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络的模型</title>
      <link href="2021/02/19/ji-suan-ji-wang-luo-de-mo-xing/"/>
      <url>2021/02/19/ji-suan-ji-wang-luo-de-mo-xing/</url>
      
        <content type="html"><![CDATA[<h1><span id="计算机网络的模型">计算机网络的模型</span></h1><h2><span id="一-osi模型介绍">一、OSI模型介绍</span></h2><p>计算机网络七层模型，也称为OSI（Open System Interconnection）参考模型，是国际标准化组织（ISO）制定的一个用于计算机或通讯系统间互联的标准体系。它是一个七层的、抽象的模型体，不仅包括一系列抽象的术语或概念，也包括具体的协议。<br>ISO 就是 Internationalization Standard Organization（国际标准组织）。</p><h2><span id="二-意义">二、意义</span></h2><p>建立七层模型的主要目的是为解决异种网络互连时所遇到的兼容性问题。它的最大优点是将服务、接口和协议这三个概念明确地区分开来：服务说明某一层为上一层提供一些什么功能，接口说明上一层如何使用下层的服务，而协议涉及如何实现本层的服务；这样各层之间具有很强的独立性，互连网络中各实体采用什么样的协议是没有限制的，只要向上提供相同的服务并且不改变相邻层的接口就可以了。</p><h2><span id="三-osi模型详细介绍">三、OSI模型详细介绍</span></h2><p>OSI中的上面4层（应用层、表示层、会话层、传输层）为高层，定义了程序的功能；下面3层（网络层、数据链路层、物理层）为低层，主要是处理面向网络的端到端数据流。</p><p>模型如下图：</p><p><img src="https://i.loli.net/2021/02/18/Kxu1CcyOj69rUfn.jpg"></p><h3><span id="应用层application-layer">应用层（Application Layer）</span></h3><p>应用层是最靠近用户的OSI层。这一层为用户的应用程序（例如电子邮件、文件传输和终端仿真）提供网络服务。<br>协议有：HTTP FTP TFTP SMTP SNMP DNS TELNET HTTPS POP3 DHCP等。</p><h3><span id="表示层presentation-layer">表示层（Presentation Layer）</span></h3><p>数据的表示、安全、压缩。可确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。<br>格式有：JPEG、ASCll、DECOIC、加密格式等。</p><p>应用程序和网络之间的翻译官，在表示层，数据将按照网络能理解的方案进行格式化；这种格式化也因所使用网络的类型不同而不同。</p><h3><span id="会话层session-layer">会话层（Session Layer）</span></h3><p>建立、管理、终止会话，对应主机进程，指本地主机与远程主机正在进行的会话。</p><p> 会话层的功能包括：建立通信链接，保持会话过程通信链接的畅通，同步两个节点之间的对话，决定通信是否被中断以及通信中断时决定从何处重新发送。</p><h3><span id="传输层transport-layer">传输层（Transport Layer）</span></h3><p>定义传输数据的协议端口号，以及流控和差错校验。<br>协议有：TCP UDP等，数据包一旦离开网卡即进入网络传输层。</p><h3><span id="网络层network-layer">网络层（Network Layer）</span></h3><p>进行逻辑地址寻址，实现不同网络之间的路径选择。</p><p>协议有：ICMP IGMP IP（IPV4 IPV6） ARP RARP等。</p><p>主要设备：三层交换机、路由器</p><h3><span id="数据链路层datalink-layer">数据链路层（Datalink Layer）</span></h3><p>建立逻辑连接、进行硬件地址寻址、差错校验等功能。（由底层网络定义协议）<br>将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。<br>传输以帧为单位的信息。</p><p>数据链路层协议的代表包括：SDLC、HDLC、PPP、STP、帧中继等。</p><p>主要设备：网桥、网卡、交换机</p><h3><span id="物理层physical-layer">物理层（Physical Layer）</span></h3><p>建立、维护、断开物理连接。（由底层网络定义协议）</p><p>二进制传输，主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。它的主要作用是传输比特流（就是由1、0转化为电流强弱来进行传输,到达目的地后在转化为1、0，也就是我们常说的数模转换与模数转换）。这一层的数据叫做比特。</p><p>主要设备：中继器、集线器</p><h2><span id="四-数据传输过程">四、数据传输过程</span></h2><p><img src="https://i.loli.net/2021/02/19/w5WHUaGKBhxTl9y.jpg"></p><h2><span id="五-tcpip模型">五、TCP/IP模型</span></h2><p><img src="https://i.loli.net/2021/02/19/YckHBgdpZwvl5xa.jpg"></p><p><img src="https://i.loli.net/2021/02/19/1VeKCGDcTQ5NXBq.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络技术标准与协议</title>
      <link href="2021/02/19/wang-luo-ji-zhu-biao-zhun-yu-xie-yi/"/>
      <url>2021/02/19/wang-luo-ji-zhu-biao-zhun-yu-xie-yi/</url>
      
        <content type="html"><![CDATA[<h1><span id="网络技术标准与协议">网络技术标准与协议</span></h1><p><img src="https://i.loli.net/2021/02/18/d4wPjCEq71WSfcL.jpg"></p><h2><span id="dhcp协议">DHCP协议</span></h2><p>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议），前身是BOOTP协议，是一个局域网的网络协议，使用UDP协议工作，统一使用两个IANA分配的端口：67（服务器端），68（客户端）。DHCP通常被用于局域网环境，主要作用是集中的管理、分配IP地址，使client动态的获得IP地址、Gateway地址、DNS服务器地址等信息，并能够提升地址的使用率。简单来说，DHCP就是一个不需要账号密码登录的、自动给内网机器分配IP地址等信息的协议。</p><p><img src="https://i.loli.net/2021/02/18/Zu9CGHl6XJLzDIj.jpg"></p><p>169.254.X.X 和 0.0.0.0 分别是windows和Linux里的假地址，这个时候计算机可能没有和DHCP服务器连上或者DHCP服务器出现故障，没有获得分配的IP地址</p><h2><span id="dns协议">DNS协议</span></h2><p>DNS 是一个应用层协议,域名系统 (DNS) 的作用是将人类可读的域名 (如，<a href="https://links.jianshu.com/go?to=http://www.example.com">www.example.com</a>) 转换为机器可读的 IP 地址 (如，192.0.2.44)。</p><h3><span id="dns-的分层">DNS 的分层</span></h3><p><img src="https://i.loli.net/2021/02/18/nKyWkor1xlN9jJi.png"></p><h3><span id="域名的分级">域名的分级</span></h3><p><img src="https://i.loli.net/2021/02/18/Tu7YDoiKskXdxOB.png"></p><h3><span id="域名服务器">域名服务器</span></h3><p>由高向低进行层次划分，可分为以下几大类：</p><table><thead><tr><th>分类</th><th>作用</th></tr></thead><tbody><tr><td>根域名服务器</td><td>最高层次的域名服务器，本地域名服务器解析不了的域名就会向其求助</td></tr><tr><td>顶级域名服务器</td><td>负责管理在该顶级域名服务器下注册的二级域名</td></tr><tr><td>权限域名服务器</td><td>负责一个区的域名解析工作</td></tr><tr><td>本地域名服务器</td><td>当一个主机发出DNS查询请求时，这个查询请求首先发给本地域名服务器</td></tr></tbody></table><p>注：一个域名服务器所负责的范围，或者说有管理权限的范围，就称为区</p><h3><span id="域名解析过程中的两种方式">域名解析过程中的两种方式</span></h3><p><strong>迭代查询</strong></p><p><img src="https://i.loli.net/2021/02/18/IjcHgSKXL8YMnOZ.jpg"></p><p><strong>递归查询</strong><img src="https://i.loli.net/2021/02/18/b69y8L52F3pSjlC.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP地址与子网划分</title>
      <link href="2021/02/19/ip-di-zhi-yu-zi-wang-hua-fen/"/>
      <url>2021/02/19/ip-di-zhi-yu-zi-wang-hua-fen/</url>
      
        <content type="html"><![CDATA[<h1><span id="ip地址与子网划分">IP地址与子网划分</span></h1><h2><span id="ip地址的分类">IP地址的分类</span></h2><p><img src="https://i.loli.net/2021/02/19/Tx5EJzSOajbtGoq.jpg"></p><p>A类：前8位为网络号，后24位为主机号</p><p>B类：前16位为网络号，后16位为主机号</p><p>C类：前24位为网络号，后8位为主机号</p><h2><span id="子网掩码">子网掩码</span></h2><p><img src="https://i.loli.net/2021/02/19/8XonDhprN9KPYiE.jpg"></p><p><img src="https://i.loli.net/2021/02/19/oXgnyOrjfd84DQS.jpg"></p><p>就是取主机号的k个bit位加入到网络号，那么这个网络就划分出了k个bit位的子网，子网掩码：网络号bit位置1，主机号bit位置0</p><h2><span id="无分类编址">无分类编址</span></h2><p><img src="https://i.loli.net/2021/02/19/oZnp6r91qGKUQvM.jpg"></p><h2><span id="特殊含义的ip地址">特殊含义的IP地址</span></h2><p><img src="https://i.loli.net/2021/02/19/cLoPqeRWV35AMSg.jpg"></p><h2><span id="ipv6">IPv6</span></h2><p><img src="https://i.loli.net/2021/02/19/RtwumUqKvCpBXSj.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> IP地址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择排序</title>
      <link href="2021/02/13/xuan-ze-pai-xu/"/>
      <url>2021/02/13/xuan-ze-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1><span id="选择排序">选择排序</span></h1><h2><span id="一-原理">一、原理</span></h2><p>1、将数组分成 已排序区 和 待排序区，已排序区 在前， 待排序区 在后</p><p>2、每一轮从 待排序区 中选择一个最小的元素放到 已排序区 的尾部</p><p>3、循环直到 待排序区 没有元素为止</p><p>例：</p><p>将 待排序区 中最小值 3，插入到 已排序区 尾部</p><p><img src="https://i.loli.net/2021/02/13/HStuG8eylFWjzQU.jpg"></p><p><img src="https://i.loli.net/2021/02/13/BSAjuDWaPFqgJLk.jpg"></p><h2><span id="二-代码">二、代码</span></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">SelectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ind <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            ind <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>ind<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">SelectSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i <span class="token operator">&amp;&amp;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out<span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> 非稳定排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="2021/02/13/kuai-su-pai-xu/"/>
      <url>2021/02/13/kuai-su-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1><span id="快速排序">快速排序</span></h1><h2><span id="一-原理">一、原理</span></h2><p>1、选择基准数据元素</p><p>2、给基准数据找其正确的索引位置，本质就是把基准数大的都放在基准数的右边，把比基准数小的放在基准数的左边</p><p>3、递归完成所有元素的排序</p><p>例：</p><p> 如下图所示，假设最开始的基准数据为数组第一个元素23，则首先用一个临时变量去存储基准数据,即 tmp=23；</p><p>然后分别从数组的两端扫描数组，设两个指示标志：low指向起始位置，high指向末尾。</p><p><img src="https://i.loli.net/2021/02/13/ly6McBKabPmIvAN.png"></p><p> 首先从后半部分开始，<strong>如果扫描到的值大于基准数据就让high减1</strong>，**<em>如果发现有元素比该基准数据的值小(如上图中18&lt;=tmp)，就将high位置的值赋值给low位置**</em> ，结果如下:</p><p><img src="https://i.loli.net/2021/02/13/gIV89zRc74yisqO.png"></p><p>然后开始从前往后扫描，<strong>如果扫描到的值小于基准数据就让low加1</strong>，**<em>如果发现有元素大于基准数据的值(如上图46=&gt;tmp)，就再将low位置的值赋值给high位置的值**</em>，指针移动并且数据交换后的结果如下:</p><p><img src="https://i.loli.net/2021/02/13/sDYRu4GZgKfbpiF.png"></p><p>然后再开始从后向前扫描，原理同上，发现上图11&lt;=tmp，则将high位置的值赋值给low位置的值，结果如下:</p><p><img src="https://i.loli.net/2021/02/13/or91D2QKk3HaMPZ.png"></p><p>然后再开始从前往后遍历，直到 low=high 结束循环，此时low或high的下标就是基准数据23在该数组中的正确索引位置。如下图所示。</p><p><img src="https://i.loli.net/2021/02/13/bQiVfUKcHjWzMYF.png"></p><h2><span id="二-代码">二、代码</span></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> l<span class="token punctuation">,</span> high <span class="token operator">=</span> r<span class="token punctuation">,</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">>=</span> tmp<span class="token punctuation">)</span> high<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> arr<span class="token punctuation">[</span>low<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> tmp<span class="token punctuation">)</span> low<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> arr<span class="token punctuation">[</span>high<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> low <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i <span class="token operator">&amp;&amp;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out<span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="三-代码优化">三、代码优化</span></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//排序的一部分用循环实现</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//取数组中间的数为基准值</span>        <span class="token keyword">int</span> low <span class="token operator">=</span> l<span class="token punctuation">,</span> high <span class="token operator">=</span> r<span class="token punctuation">,</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//从数组左侧找到一个大于等于tmp的值</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;</span> tmp<span class="token punctuation">)</span> low<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">//从数组右侧找到一个小于于等于tmp的值</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">></span> tmp<span class="token punctuation">)</span> high<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment">//不断交换，最终小于tmp的值被分成一部分</span>            <span class="token comment">//大于tmp的值分为另一部分</span>            <span class="token comment">//排序过程中，tmp在随机两个部分中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                low<span class="token operator">++</span><span class="token punctuation">,</span> high<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//当low > high 时跳出循环，此时 l - high 为小于等于tmp部分</span>        <span class="token comment">//low - r 为大于等于tmp部分</span>        <span class="token function">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        r <span class="token operator">=</span> high<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i <span class="token operator">&amp;&amp;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> 非稳定排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="2021/02/12/gui-bing-pai-xu/"/>
      <url>2021/02/12/gui-bing-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1><span id="归并排序">归并排序</span></h1><h2><span id="一-原理">一、原理</span></h2><p>归并排序（MERGE-SORT）是利用<strong>归并</strong>的思想实现的排序方法，该算法采用经典的<strong>分治</strong>（divide-and-conquer）策略（分治法将问题<strong>分</strong>(divide)成一些小的问题然后递归求解，而**治(conquer)**的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。</p><p><img src="https://i.loli.net/2021/02/12/3pAltQLoX1qZzRm.png"></p><p>可以看到这种结构很像一棵完全二叉树。<strong>分</strong>阶段可以理解为就是递归拆分子序列的过程，递归深度为log2n。</p><p><strong>治</strong>阶段，我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将[4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]，如下图。</p><p><img src="https://i.loli.net/2021/02/12/epkNMSJxGgnWrvs.png"></p><p><img src="https://i.loli.net/2021/02/12/sJkPfOYtXWEyGj3.png"></p><h2><span id="二-代码">二、代码</span></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span>                                                                                                                 </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span>                                                                                                                </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span>                                                                                                                </span>                                                                                                                                  <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                                                                    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>                                                                                                                                                                                                                                                                   <span class="token keyword">void</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                                                              <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                                                                                     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                                                                <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                                         <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p1 <span class="token operator">=</span> l<span class="token punctuation">,</span> p2 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid <span class="token operator">||</span> p2 <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">></span> r <span class="token operator">||</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>arr <span class="token operator">+</span> l<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i <span class="token operator">&amp;&amp;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out<span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> 稳定排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="2021/02/12/mou-pao-pai-xu/"/>
      <url>2021/02/12/mou-pao-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1><span id="冒泡排序">冒泡排序</span></h1><h2><span id="一-原理">一、原理</span></h2><p>1、将数组分成 已排序区 和 待排序区， 已排序区 在后，待排序区 在前。</p><p>2、从头到尾扫描 待排序区 ，若前面元素比后面元素大，则交换。到达末尾时，此时 待排序区 的最后一个元素即选出来的最大元素，插入到 已排序区 首位。</p><p>4、循环，直到 待排序区 没有元素为止</p><p>例：</p><p>交换 4 和 5</p><p><img src="https://i.loli.net/2021/02/12/ErBgZYs37hGMyAo.jpg"></p><p><img src="https://i.loli.net/2021/02/12/W3vJiKPB8VOXA9U.jpg"></p><p>7 到达 待排序区 末尾</p><p><img src="https://i.loli.net/2021/02/12/MjB3k2zshnKcx5R.jpg"></p><p>7 插入到 已排序区 首位</p><p><img src="https://i.loli.net/2021/02/12/LUbmsRZTrvxN7t2.jpg"></p><h2><span id="二-代码">二、代码</span></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> times<span class="token punctuation">;</span> <span class="token comment">//记录本轮扫描是否有交换，若无交换则序列已经完成排序，可退出循环</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            times<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">BubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i <span class="token operator">&amp;&amp;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out<span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> 稳定排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插入排序</title>
      <link href="2021/02/12/cha-ru-pai-xu/"/>
      <url>2021/02/12/cha-ru-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1><span id="插入排序">插入排序</span></h1><h2><span id="一-原理">一、原理</span></h2><p>1、将数组中的元素分为 已排序区 和 待排序区 ，已排序区 在前，待排序区 在后。</p><p>2、将 待排序区 第一个元素插入到 已排序区 末尾，与前一个元素比较，如果比前面的元素小，则交换两元素，继续比较插入元素和前一位元素，当插入元素符合排列大小或者到达首位则本次插入完成。</p><p>3、循环插入，直到 待排序区 为空。</p><p>例：将 6 从 待排序区 插入到 已排序区</p><p><img src="https://i.loli.net/2021/02/12/h9bT8rEuGvitfpP.jpg"></p><p><img src="https://i.loli.net/2021/02/12/TgwzZRUH4au6OXL.jpg"></p><h2><span id="二-代码">二、代码</span></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">InsertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i <span class="token operator">&amp;&amp;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out<span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> 稳定排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元测试框架</title>
      <link href="2021/02/11/shi-xian-jian-yi-de-dan-yuan-ce-shi-kuang-jia/"/>
      <url>2021/02/11/shi-xian-jian-yi-de-dan-yuan-ce-shi-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1><span id="实现简易的单元测试框架">实现简易的单元测试框架</span></h1><h2><span id="文件目录结构">文件目录结构</span></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ tree           <span class="token punctuation">.</span>├── bin│   └── test├── build│   ├── main<span class="token punctuation">.</span>o│   └── test<span class="token punctuation">.</span>o├── include│   ├── linklist<span class="token punctuation">.</span>h│   └── test<span class="token punctuation">.</span>h├── lib│   └── libtest<span class="token punctuation">.</span>a├── Makefile└── src    ├── main<span class="token punctuation">.</span>c    └── test<span class="token punctuation">.</span>c<span class="token number">5</span> directories<span class="token punctuation">,</span> <span class="token number">9</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="代码">代码</span></h2><p>总体思想：设计测试单元。建立一个测试单元结构体链表，使用__attribute__((constructor))修改测试单元属性，在进入main函数前将所有测试单元依次加入链表。进入主函数对链表中的测试单元依次进行测试。</p><p>main.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"test.h"</span></span><span class="token comment">//一组测试例</span><span class="token function">TEST</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> add0<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">EXPECT_EQ</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断言</span>    <span class="token function">EXPECT_NE</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_LE</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_LT</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">TEST</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> add1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">EXPECT_EQ</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_NE</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_GE</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_GT</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//开始测试</span>    <span class="token keyword">return</span> <span class="token function">RUN_ALL_TESTS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test.h</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__test_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__test_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"linklist.h"</span></span><span class="token comment">//添加输出字体颜色</span><span class="token comment">// C语言中连续两个字符串可连接成一个字符串 “abc” "def" == "abcdef"</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">COLOR</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">,</span> color<span class="token punctuation">)</span> </span><span class="token string">"\033["</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">color</span> </span></span><span class="token string">"m"</span> <span class="token expression">str </span><span class="token string">"\033[0m"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">COLOR_HL</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">,</span> color<span class="token punctuation">)</span> </span><span class="token string">"\033[1;"</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">color</span> </span></span><span class="token string">"m"</span> <span class="token expression">str </span><span class="token string">"\033[0m"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">RED</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token function">COLOR</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GREEN</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token function">COLOR</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">YELLOW</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token function">COLOR</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BLUE</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token function">COLOR</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">RED_HL</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token function">COLOR_HL</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GREEN_HL</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token function">COLOR_HL</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">YELLOW_HL</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token function">COLOR_HL</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BLUE_HL</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token function">COLOR_HL</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span></span></span><span class="token comment">//测试宏</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TEST</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">void</span> a</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">/*使下一函数优先于main函数被执行*/</span> <span class="token punctuation">\</span><span class="token expression"><span class="token keyword">void</span> add_</span><span class="token punctuation">##</span><span class="token expression">a</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">add_function</span><span class="token punctuation">(</span>a</span><span class="token punctuation">##</span><span class="token expression">b<span class="token punctuation">,</span> #a </span><span class="token string">"."</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">b</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span><span class="token comment">/*添加测试组函数到链表*/</span> <span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">void</span> a</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TYPE</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">_Generic</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token comment">/*_Generic c11泛型关键字 将相应类型替换为格式控制字符串*/</span> <span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">int</span> <span class="token operator">:</span> </span><span class="token string">"%d"</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">float</span> <span class="token operator">:</span> </span><span class="token string">"f"</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">double</span> <span class="token operator">:</span> </span><span class="token string">"lf"</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">:</span> </span><span class="token string">"lld"</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token operator">:</span> </span><span class="token string">"%s"</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token operator">:</span> </span><span class="token string">"%s"</span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token comment">//打印字符串</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">P</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">char</span> frm<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">sprintf</span><span class="token punctuation">(</span>frm<span class="token punctuation">,</span> <span class="token function">color</span><span class="token punctuation">(</span></span><span class="token string">"%s"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TYPE</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>frm<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span></span></span><span class="token comment">//断言 根据 cmp 比较 a 和 b 的值</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EXPECT</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">__typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> _a <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">__typeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> _b <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression">test_info<span class="token punctuation">.</span>total<span class="token operator">++</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>_a cmp _b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>test_info<span class="token punctuation">.</span>success<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">else</span> <span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">YELLOW_HL</span><span class="token punctuation">(</span></span><span class="token string">"\t%s:%d: failure\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token comment">/*输出错误点信息*/</span><span class="token punctuation">\</span>        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">YELLOW_HL</span><span class="token punctuation">(</span></span><span class="token string">"\t\texpect : "</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">a</span> </span></span><span class="token string">" "</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">cmp</span> </span></span><span class="token string">" "</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">b</span><span class="token expression"><span class="token punctuation">)</span> </span></span></span><span class="token string">"\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">YELLOW_HL</span><span class="token punctuation">(</span></span><span class="token string">"\t\tactual : "</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>        <span class="token expression"><span class="token function">P</span><span class="token punctuation">(</span>_a<span class="token punctuation">,</span>YELLOW_HL<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">YELLOW_HL</span><span class="token punctuation">(</span></span><span class="token string">" vs "</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>        <span class="token expression"><span class="token function">P</span><span class="token punctuation">(</span>_b<span class="token punctuation">,</span>YELLOW_HL<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\r\n\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token punctuation">&#125;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">GREEN_HL</span><span class="token punctuation">(</span></span><span class="token string">"[-----------] "</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>#a </span><span class="token string">" "</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">cmp</span> </span></span><span class="token string">" "</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">b</span> </span></span><span class="token string">" %s\r\n"</span><span class="token expression"><span class="token punctuation">,</span>_a cmp _b <span class="token operator">?</span> <span class="token function">GREEN</span><span class="token punctuation">(</span></span><span class="token string">"True"</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">RED</span><span class="token punctuation">(</span></span><span class="token string">"False"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EXPECT_EQ</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">EXPECT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">==</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EXPECT_NE</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">EXPECT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">!=</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EXPECT_LE</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">EXPECT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&lt;=</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EXPECT_LT</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">EXPECT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EXPECT_GE</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">EXPECT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">>=</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EXPECT_GT</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">EXPECT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">></span><span class="token punctuation">)</span></span></span><span class="token comment">//测试组函数指针类型</span><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>FunctestT<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//测试组函数结构体</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Function</span><span class="token punctuation">&#123;</span>    FunctestT func<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>    LinkNode p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Function<span class="token punctuation">;</span><span class="token comment">//测试信息结构体</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">FunctionInfo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> total<span class="token punctuation">,</span> success<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>FunctionInfo<span class="token punctuation">;</span><span class="token keyword">extern</span> FunctionInfo test_info<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">RUN_ALL_TESTS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add_function</span><span class="token punctuation">(</span>FunctestT<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// __test_H__</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>linklist.h</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__linklist_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__linklist_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">offset</span><span class="token expression"><span class="token punctuation">(</span>T<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token comment">//结构体元素偏移量</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HEAD</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">,</span> T<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">(</span>T <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">offset</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token comment">//移动指针到结构体首地址</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>LinkNode<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// __linklist_H__</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"test.h"</span></span><span class="token keyword">int</span> func_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//测试组函数个数</span>Function func_head<span class="token punctuation">,</span> <span class="token operator">*</span>func_tail <span class="token operator">=</span> <span class="token operator">&amp;</span>func_head<span class="token punctuation">;</span><span class="token comment">//头结点 和 尾节点指针</span>FunctionInfo test_info<span class="token punctuation">;</span><span class="token comment">//测试节点信息</span><span class="token keyword">int</span> <span class="token function">RUN_ALL_TESTS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>LinkNode <span class="token operator">*</span>p <span class="token operator">=</span> func_head<span class="token punctuation">.</span>p<span class="token punctuation">.</span>next<span class="token punctuation">;</span> p<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Function <span class="token operator">*</span>func <span class="token operator">=</span> <span class="token function">HEAD</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> Function<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//移动指针到结构体首地址</span>        test_info<span class="token punctuation">.</span>total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> test_info<span class="token punctuation">.</span>success <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">GREEN_HL</span><span class="token punctuation">(</span><span class="token string">"[====RUN====]"</span><span class="token punctuation">)</span><span class="token function">RED_HL</span><span class="token punctuation">(</span><span class="token string">" %s\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> func<span class="token operator">-></span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        func<span class="token operator">-></span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>func<span class="token operator">-></span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        func<span class="token operator">-></span>str <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">;</span>        func <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">GREEN_HL</span><span class="token punctuation">(</span><span class="token string">"[  "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> rate <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> test_info<span class="token punctuation">.</span>success <span class="token operator">/</span> test_info<span class="token punctuation">.</span>total<span class="token punctuation">;</span> <span class="token comment">//测试通过率</span>        rate <span class="token operator">*=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>rate <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1e-6</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">BLUE_HL</span><span class="token punctuation">(</span><span class="token string">"%6.2lf%%"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">RED_HL</span><span class="token punctuation">(</span><span class="token string">"%6.2lf%%"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">GREEN_HL</span><span class="token punctuation">(</span><span class="token string">"  ] "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"total : %d success : %d \r\n"</span><span class="token punctuation">,</span> test_info<span class="token punctuation">.</span>total<span class="token punctuation">,</span>test_info<span class="token punctuation">.</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//添加测试组函数到结构体链表</span><span class="token keyword">void</span> <span class="token function">add_function</span><span class="token punctuation">(</span>FunctestT func<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Function <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Function<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token operator">-></span>func <span class="token operator">=</span> func<span class="token punctuation">;</span>    temp<span class="token operator">-></span>str <span class="token operator">=</span> <span class="token function">strdup</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    func_tail<span class="token operator">-></span>p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>temp<span class="token operator">-></span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    func_tail <span class="token operator">=</span> temp<span class="token punctuation">;</span>    func_cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>bin<span class="token operator">/</span>test<span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span>RUN<span class="token operator">==</span><span class="token operator">==</span><span class="token punctuation">]</span> test<span class="token punctuation">.</span>add0<span class="token punctuation">[</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> True<span class="token punctuation">[</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span> True<span class="token punctuation">[</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2</span> True<span class="token punctuation">[</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5</span> True<span class="token punctuation">[</span>  <span class="token number">100.00</span><span class="token operator">%</span>  <span class="token punctuation">]</span> total <span class="token operator">:</span> <span class="token number">4</span> success <span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span>RUN<span class="token operator">==</span><span class="token operator">==</span><span class="token punctuation">]</span> test<span class="token punctuation">.</span>add1<span class="token punctuation">[</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> True        <span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>main<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span> failure                expect <span class="token operator">:</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span>                actual <span class="token operator">:</span> <span class="token number">2</span> vs <span class="token number">2</span><span class="token punctuation">[</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> False<span class="token punctuation">[</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span> True        <span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>main<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span> failure                expect <span class="token operator">:</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span>                actual <span class="token operator">:</span> <span class="token number">2</span> vs <span class="token number">3</span><span class="token punctuation">[</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span> False<span class="token punctuation">[</span>   <span class="token number">50.00</span><span class="token operator">%</span>  <span class="token punctuation">]</span> total <span class="token operator">:</span> <span class="token number">4</span> success <span class="token operator">:</span> <span class="token number">2</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛顿迭代法</title>
      <link href="2021/02/10/niu-dun-die-dai-fa/"/>
      <url>2021/02/10/niu-dun-die-dai-fa/</url>
      
        <content type="html"><![CDATA[<h1><span id="一-原理">一、原理</span></h1><p>牛顿迭代法是一种解决一元高次方程的算法</p><p><img src="https://i.loli.net/2021/02/10/38ZvPN5wjSr6JTq.jpg"></p><p>算法推导过程：</p><p>通过不断迭代直到（x<em>，0）处，求得x\</em>的近似值</p><p>对于点（x0，f(x0)）迭代到（x1, 0）,</p><p>（x0， f(x0)）的两点式切线方程为：</p><p>0 - f(x0) = f’(x0)(x1 - x0)</p><p>可得迭代式：x1 = x0 - f(x0) / f’(x0)</p><h1><span id="二-代码">二、代码</span></h1><p>求 f(x) = x^2 的根</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span>                                                                                                           </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span>                                                                                                            </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EPSL</span> <span class="token expression"><span class="token number">1e-7</span>                                                                                                           </span></span><span class="token keyword">double</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> x <span class="token operator">-</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">NewTon</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span>F<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">double</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> x <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span><span class="token function">F</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> EPSL<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">-=</span> <span class="token function">F</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">MySqrt</span><span class="token punctuation">(</span><span class="token keyword">double</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">NewTon</span><span class="token punctuation">(</span>F<span class="token punctuation">,</span> f<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> n<span class="token punctuation">,</span> ans<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x^2 = %lf\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    ans <span class="token operator">=</span> <span class="token function">MySqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = %lf\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="运行结果">运行结果：</span></h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out<span class="token number">4</span>x<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">4.000000</span>x <span class="token operator">=</span> <span class="token number">2.000000</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out<span class="token number">5</span>x<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">5.000000</span>x <span class="token operator">=</span> <span class="token number">2.236068</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛顿迭代法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>素数筛</title>
      <link href="2021/02/10/su-shu-shai/"/>
      <url>2021/02/10/su-shu-shai/</url>
      
        <content type="html"><![CDATA[<h1><span id="素数筛">素数筛</span></h1><h2><span id="一-原理">一、原理</span></h2><p>1、标记一个范围内的数字是否是合数，没有被标记的则为素数</p><p>2、算法的空间复杂度为O(N)，时间复杂度为O(N * loglogN)</p><p>3、总体思想是用素数去标记掉不是素数的数字，例如我知道了i是素数，那么2*i、3*i、4*i……就都不是素数</p><h2><span id="二-代码实现">二、代码实现</span></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_N</span> <span class="token expression"><span class="token number">10000</span></span></span><span class="token keyword">int</span> prime<span class="token punctuation">[</span>MAX_N <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> MAX_N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        prime<span class="token punctuation">[</span><span class="token operator">++</span>prime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token comment">//j 从 i * i 开始向后标记</span>        <span class="token comment">//在 i * i 之前的合数则已经被 i 之前的素数标记了</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> MAX_N<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> prime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="运行结果">运行结果：</span></h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out  <span class="token number">2</span><span class="token number">3</span><span class="token number">5</span><span class="token number">7</span><span class="token number">11</span><span class="token number">13</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 素数筛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性筛</title>
      <link href="2021/02/10/xian-xing-shai/"/>
      <url>2021/02/10/xian-xing-shai/</url>
      
        <content type="html"><![CDATA[<h1><span id="线性筛">线性筛</span></h1><h2><span id="一-原理">一、原理</span></h2><p>1、标记一个范围内的数字是否是合数，没有被标记的则为素数</p><p>2、算法的空间复杂度为O(N)，时间复杂度为O(N)</p><p>3、总体思想是用一个整数M去标记合数N，其中N和M具有如下性质<br>1）N中最小的素数为p<br>2）N =  p * M<br>3）p一定小于等于M中最小的素因子<br>4）利用M * P(所有不大于M中最小素数的集合）标记N1、N2、N3 …..</p><h2><span id="二-代码">二、代码</span></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_N</span> <span class="token expression"><span class="token number">10000</span></span></span><span class="token keyword">int</span> prime<span class="token punctuation">[</span>MAX_N <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> MAX_N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> prime<span class="token punctuation">[</span><span class="token operator">++</span>prime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> prime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> MAX_N<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment">//确定i，不断遍历已有素数表中的素数来标记合数</span>            prime<span class="token punctuation">[</span>i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">//如果 prime[j] 已经是 i 的最小素因子了，则跳出循环</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> prime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性筛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变参函数和变参宏定义</title>
      <link href="2021/02/09/ke-bian-can-shu-han-shu/"/>
      <url>2021/02/09/ke-bian-can-shu-han-shu/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-变参函数介绍">一、变参函数介绍</span></h2><p>C 语言允许定义参数数量可变的函数，这称为可变参数函数（variadic function）。这种函数需要固定数量的强制参数（mandatory argument），后面是数量可变的可选参数（optional argument）。</p><p>可变参数函数要获取可选参数时，必须通过一个类型为 va_list 的对象，它包含了参数信息。这种类型的对象也称为参数指针（argument pointer），它包含了栈中至少一个参数的位置。可以使用这个参数指针从一个可选参数移动到下一个可选参数，由此，函数就可以获取所有的可选参数。va_list 类型被定义在头文件 stdarg.h 中。</p><h2><span id="二-使用方法">二、使用方法</span></h2><ul><li>定义一个函数，最后一个参数为省略号，省略号前面可以设置自定义参数。</li><li>在函数定义中创建一个 <strong>va_list</strong> 类型变量，该类型是在 stdarg.h 头文件中定义的。</li><li>使用 固定参数和 <strong>va_start</strong> 宏来初始化 <strong>va_list</strong> 变量为一个参数列表。宏 va_start 是在 stdarg.h 头文件中定义的。</li><li>使用 <strong>va_arg</strong> 宏和 <strong>va_list</strong> 变量来访问参数列表中的每个项。</li><li>使用宏 <strong>va_end</strong> 来清理赋予 <strong>va_list</strong> 变量的内存。</li></ul><h4><span id="代码演示">代码演示</span></h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdint></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;inttypes.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span></span><span class="token keyword">int</span> <span class="token function">IntMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> INT32_MIN<span class="token punctuation">;</span>    va_list arg<span class="token punctuation">;</span>    <span class="token function">va_start</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">&lt;</span> temp<span class="token punctuation">)</span> ans <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">va_end</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max = %d\n"</span><span class="token punctuation">,</span> <span class="token function">IntMax</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max = %d\n"</span><span class="token punctuation">,</span><span class="token function">IntMax</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max = %d\n"</span><span class="token punctuation">,</span><span class="token function">IntMax</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="运行结果">运行结果：</span></h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>outmax <span class="token operator">=</span> <span class="token number">3</span>max <span class="token operator">=</span> <span class="token number">5</span>max <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="三-变参宏定义">三、变参宏定义</span></h2><p>C99中规定宏可以像函数一样带有可变参数，比如</p><pre class="line-numbers language-none"><code class="language-none">#define LOG(format, ...) fprintf(stdout, format, __VA_ARGS__)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，…表示参数可变，__VA_ARGS__在预处理中为实际的参数集所替换</p><p>GCC中同时支持如下的形式</p><pre class="line-numbers language-none"><code class="language-none">#define LOG(format, args...) fprintf(stdout, format, args)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其用法和上面的基本一致，只是参数符号有变化</p><p><strong>可变参数的宏里的‘##’操作说明</strong> </p><p>GNU CPP还有两种更复杂的宏扩展，支持上面两种格式的定义格式。</p><p>在标准C里，你不能省略可变参数，但是你却可以给它传递一个空的参数。例如，下面的宏调用在ISO C里是非法的，因为字符串后面没有逗号：</p><p>debug (“A message”)</p><p>GNU CPP在这种情况下可以让你完全的忽略可变参数。在上面的例子中，编译器仍然会有问题（complain），因为宏展开后，里面的字符串后面会有个多余的逗号。</p><p>为了解决这个问题，CPP使用一个特殊的‘##’操作。书写格式为：</p><p>#define debug(format, …) fprintf (stderr, format, ## __VA_ARGS__)</p><p>这里，如果可变参数被忽略或为空，‘##’操作将使预处理器（preprocessor）去除掉它前面的那个逗号。如果你在宏调用时，确实提供了一些可变参数，GNU CPP也会工作正常，它会把这些可变参数放到逗号的后面。象其它的pasted macro参数一样，这些参数不是宏的扩展。</p><h4><span id="代码演示">代码演示：</span></h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdint></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;inttypes.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>frm<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>frm<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">args<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"LOG1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"LOG2: %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"LOG3: %d, %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"LOG4: %d, %d, %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="运行结果">运行结果：</span></h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>outLOG1LOG2<span class="token operator">:</span> <span class="token number">1</span>LOG3<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>LOG4<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
            <tag> 宏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧几里得和扩展欧几里得算法</title>
      <link href="2021/02/09/ou-ji-li-de-suan-fa/"/>
      <url>2021/02/09/ou-ji-li-de-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1><span id="一-欧几里得算法">一、欧几里得算法</span></h1><p>简介：辗转相除法， 又名<a href="https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%B7%E7%AE%97%E6%B3%95/9002848">欧几里德算法</a>（Euclidean algorithm），是求最大公约数的一种方法。它的具体做法是：用较大数除以较小数，再用出现的余数（第一余数）去除除数，再用出现的余数（第二余数）去除第一余数，如此反复，直到最后余数是0为止。如果是求两个数的最大公约数，那么最后的除数就是这两个数的最大公约数。</p><p>另一种求两数的最大公约数的方法是<a href="https://baike.baidu.com/item/%E6%9B%B4%E7%9B%B8%E5%87%8F%E6%8D%9F%E6%B3%95/10277459">更相减损法</a>。</p><h3><span id="辗转相除法举例">辗转相除法举例：</span></h3><p>求 10 ，25的最大公约数：<br>25 / 10 = 2 ······5<br>10 / 5  = 2 ······0<br>所以10，25的最大公约数为5</p><h3><span id="原理">原理：</span></h3><p><img src="https://i.loli.net/2021/02/09/UltH8sr1E5LGjzY.jpg"></p><p><img src="https://i.loli.net/2021/02/09/YomK46dHDvLgihq.jpg"></p><h3><span id="代码实现">代码实现：</span></h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;cstdio&gt;int gcd(int a, int b) &#123;    if (b &#x3D;&#x3D; 0) return a;    return gcd(b, a % b);&#125;int main() &#123;    int a, b;    scanf(&quot;%d%d&quot;, &amp;a, &amp;b);    int ans &#x3D; gcd(a, b);    printf(&quot;%d\n&quot;, ans);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="运行结果">运行结果：</span></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out<span class="token number">25</span> <span class="token number">10</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1><span id="二-扩展欧几里得算法">二、扩展欧几里得算法</span></h1><h3><span id="原理">原理：</span></h3><p><strong>贝祖定理</strong>：如果a、b是整数，那么一定存在整数 x、y 使得 ax+by=gcd(a,b)。</p><p><strong>扩展欧几里得</strong>：</p><p>​    当到达递归边界的时候，b=0，a=gcd(a,b) 这时可以观察出来这个式子的一个解：a*1+b*0=gcd(a,b)，x=1,y=0，注意这时的a和b已经不是最开始的那个a和b了，所以我们如果想要求出解x和y，就要回到最开始的模样。</p><p>   假设当前我们在求a和b的最大公约数，而我们已经求出了下一个状态：b和a%b的最大公因数，并且求出了一组x1和y1使得             b*x1+(a%b)*y1=gcd</p><p>（注意在递归算法中，永远都是先得到下面一个状态的值）</p><p>这时我们可以试着去寻找这两个相邻状态的关系：</p><p>首先我们知道：a%b=a-(a/b)*b；带入：</p><p>b*x1 + (a-(a/b)*b)*y1</p><p>= b*x1 + a*y1 – (a/b)<em>b</em>y1</p><p>= a*y1 + b*(x1 – a/b*y1) = gcd  </p><p>此时我们发现如果要使上一层等式 ax+by=gcd 成立，则需要 x = y1 , y = x1 – a/b*y1</p><p>这样我们就得到了每两个相邻状态的x和y的转化，就可以在求gcd的同时对x和y进行求值了</p><h3><span id="代码实现">代码实现：</span></h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;cstdio&gt;int ex_gcd(int a, int b, int *x, int *y) &#123;    if (b &#x3D;&#x3D; 0) &#123;        *x &#x3D; 1;        *y &#x3D; 0;        return a;    &#125;    int xx, yy, ret &#x3D; ex_gcd(b, a % b, &amp;xx, &amp;yy);    *x &#x3D; yy;    *y &#x3D; xx - a &#x2F; b * yy;    return ret;&#125;int main() &#123;    int a, b, x, y;    scanf(&quot;%d%d&quot;, &amp;a, &amp;b);    printf(&quot;gcd(%d, %d) &#x3D; %d\n&quot;, a, b, ex_gcd(a, b, &amp;x, &amp;y));    printf(&quot;%d * %d + %d * %d &#x3D; %d\n&quot;, a, x, b, y, a * x + b * y);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="运行结果">运行结果：</span></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out<span class="token number">25</span> <span class="token number">10</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token number">25</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令</title>
      <link href="2021/01/29/linux-ming-ling/"/>
      <url>2021/01/29/linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>关于Linux系统一些常用命令的简介</p><p><img src="https://i.loli.net/2021/01/24/AUmbSC7N6HyJ2WX.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPU分支预测</title>
      <link href="2021/01/29/fen-zhi-yu-ce/"/>
      <url>2021/01/29/fen-zhi-yu-ce/</url>
      
        <content type="html"><![CDATA[<h1><span id="一-什么是cpu分支预测">一、什么是CPU分支预测</span></h1><p>CPU 在遇到 if 分支结构发语句时是怎么处理的呢？</p><p>我们想象一下，假如你遇到了一个分叉路口，而此时你并不知道目的地在哪个方向，你会怎么做呢？</p><p>很显然，你只能随机选择一条路继续前进，如果你猜对了，那么恭喜你。但是如果你猜错了呢，毫无疑问，你只能沿路返回路口，再选择另一条路，CPU在遇到 if 语句是也是如此。</p><p><img src="https://i.loli.net/2021/01/29/GdwKUNnMhIAB47b.jpg"></p><p>如果CPU总是猜错，那么程序的执行效率明显会有所降低，那有没有一种办法能够提高CPU猜中的可能性呢？</p><p>这就是 if 语句的分支预测。</p><h1><span id="二-分支预测的使用">二、分支预测的使用</span></h1><p>Linux系统中，定义了两个宏，在linux/compiler中，如下。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define likely(x)    __builtin_expect(!!(x), 1)        &#x2F;&#x2F; 表示x的值为真的可能性更大#define unlikely(x)  __builtin_expect(!!(x), 0)        &#x2F;&#x2F; 表示x的值为假的可能性更大<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也就是说，使用 likely() 后执行 if 后面的代码机会更大，使用 unlikely 后执行 else 后面的代码机会更大。</p><p>我们可以客观分析一下 if 语句的条件是否是经常成立的，如果这个条件确实是经常成立，或者是不成立，那么就可以使用这两个宏定义来提高程序运行的效率。</p><p>__builtin_expect 是 gcc 的内建宏，可以直接用，不加头文件。</p><p>参考下面两段代码：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main() &#123;    int x &#x3D; 0;    for (int i &#x3D; 0; ; i++) &#123;        if (x &lt; 200000000) x++;        else &#123;            break;        &#125;    &#125;    printf(&quot;OK\n&quot;);    return 0;&#125;运行结果：$ time .&#x2F;mytestOK.&#x2F;mytest  0.72s user 0.00s system 99% cpu 0.725 total<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main() &#123;    int x &#x3D; 0;    for (int i &#x3D; 0; ; i++) &#123;        if (__builtin_expect(!!(x &lt; 200000000), 1)) &#123;            x++;        &#125; else &#123;            break;        &#125;    &#125;    printf(&quot;OK\n&quot;);    return 0;&#125;运行结果：    $ time .&#x2F;mytestOK.&#x2F;mytest  0.59s user 0.00s system 99% cpu 0.597 total<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言编程技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/29/hello-world/"/>
      <url>2021/01/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3><span id="run-server">Run server</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3><span id="generate-static-files">Generate static files</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
