<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>欧几里得和扩展欧几里得算法</title>
      <link href="2021/02/09/ou-ji-li-de-suan-fa/"/>
      <url>2021/02/09/ou-ji-li-de-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1><span id="一-欧几里得算法">一、欧几里得算法</span></h1><p>简介：辗转相除法， 又名<a href="https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%B7%E7%AE%97%E6%B3%95/9002848">欧几里德算法</a>（Euclidean algorithm），是求最大公约数的一种方法。它的具体做法是：用较大数除以较小数，再用出现的余数（第一余数）去除除数，再用出现的余数（第二余数）去除第一余数，如此反复，直到最后余数是0为止。如果是求两个数的最大公约数，那么最后的除数就是这两个数的最大公约数。</p><p>另一种求两数的最大公约数的方法是<a href="https://baike.baidu.com/item/%E6%9B%B4%E7%9B%B8%E5%87%8F%E6%8D%9F%E6%B3%95/10277459">更相减损法</a>。</p><h3><span id="辗转相除法举例">辗转相除法举例：</span></h3><p>求 10 ，25的最大公约数：<br>25 / 10 = 2 ······5<br>10 / 5  = 2 ······0<br>所以10，25的最大公约数为5</p><h3><span id="原理">原理：</span></h3><p><img src="https://i.loli.net/2021/02/09/UltH8sr1E5LGjzY.jpg"></p><p><img src="https://i.loli.net/2021/02/09/YomK46dHDvLgihq.jpg"></p><h3><span id="代码实现">代码实现：</span></h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;cstdio&gt;int gcd(int a, int b) &#123;    if (b &#x3D;&#x3D; 0) return a;    return gcd(b, a % b);&#125;int main() &#123;    int a, b;    scanf(&quot;%d%d&quot;, &amp;a, &amp;b);    int ans &#x3D; gcd(a, b);    printf(&quot;%d\n&quot;, ans);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="运行结果">运行结果：</span></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out<span class="token number">25</span> <span class="token number">10</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1><span id="二-扩展欧几里得算法">二、扩展欧几里得算法</span></h1><h3><span id="原理">原理：</span></h3><p><strong>贝祖定理</strong>：如果a、b是整数，那么一定存在整数 x、y 使得 ax+by=gcd(a,b)。</p><p><strong>扩展欧几里得</strong>：</p><p>​    当到达递归边界的时候，b=0，a=gcd(a,b) 这时可以观察出来这个式子的一个解：a*1+b*0=gcd(a,b)，x=1,y=0，注意这时的a和b已经不是最开始的那个a和b了，所以我们如果想要求出解x和y，就要回到最开始的模样。</p><p>   假设当前我们在求a和b的最大公约数，而我们已经求出了下一个状态：b和a%b的最大公因数，并且求出了一组x1和y1使得             b*x1+(a%b)*y1=gcd</p><p>（注意在递归算法中，永远都是先得到下面一个状态的值）</p><p>这时我们可以试着去寻找这两个相邻状态的关系：</p><p>首先我们知道：a%b=a-(a/b)*b；带入：</p><p>b*x1 + (a-(a/b)*b)*y1</p><p>= b*x1 + a*y1 – (a/b)<em>b</em>y1</p><p>= a*y1 + b*(x1 – a/b*y1) = gcd  </p><p>此时我们发现如果要使上一层等式 ax+by=gcd 成立，则需要 x = y1 , y = x1 – a/b*y1</p><p>这样我们就得到了每两个相邻状态的x和y的转化，就可以在求gcd的同时对x和y进行求值了</p><h3><span id="代码实现">代码实现：</span></h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;cstdio&gt;int ex_gcd(int a, int b, int *x, int *y) &#123;    if (b &#x3D;&#x3D; 0) &#123;        *x &#x3D; 1;        *y &#x3D; 0;        return a;    &#125;    int xx, yy, ret &#x3D; ex_gcd(b, a % b, &amp;xx, &amp;yy);    *x &#x3D; yy;    *y &#x3D; xx - a &#x2F; b * yy;    return ret;&#125;int main() &#123;    int a, b, x, y;    scanf(&quot;%d%d&quot;, &amp;a, &amp;b);    printf(&quot;gcd(%d, %d) &#x3D; %d\n&quot;, a, b, ex_gcd(a, b, &amp;x, &amp;y));    printf(&quot;%d * %d + %d * %d &#x3D; %d\n&quot;, a, x, b, y, a * x + b * y);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="运行结果">运行结果：</span></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out<span class="token number">25</span> <span class="token number">10</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token number">25</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令</title>
      <link href="2021/01/29/linux-ming-ling/"/>
      <url>2021/01/29/linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>关于Linux系统一些常用命令的简介</p><p><img src="https://i.loli.net/2021/01/24/AUmbSC7N6HyJ2WX.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPU分支预测</title>
      <link href="2021/01/29/fen-zhi-yu-ce/"/>
      <url>2021/01/29/fen-zhi-yu-ce/</url>
      
        <content type="html"><![CDATA[<h1><span id="一-什么是cpu分支预测">一、什么是CPU分支预测</span></h1><p>CPU 在遇到 if 分支结构发语句时是怎么处理的呢？</p><p>我们想象一下，假如你遇到了一个分叉路口，而此时你并不知道目的地在哪个方向，你会怎么做呢？</p><p>很显然，你只能随机选择一条路继续前进，如果你猜对了，那么恭喜你。但是如果你猜错了呢，毫无疑问，你只能沿路返回路口，再选择另一条路，CPU在遇到 if 语句是也是如此。</p><p><img src="https://i.loli.net/2021/01/29/GdwKUNnMhIAB47b.jpg"></p><p>如果CPU总是猜错，那么程序的执行效率明显会有所降低，那有没有一种办法能够提高CPU猜中的可能性呢？</p><p>这就是 if 语句的分支预测。</p><h1><span id="二-分支预测的使用">二、分支预测的使用</span></h1><p>Linux系统中，定义了两个宏，在linux/compiler中，如下。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define likely(x)    __builtin_expect(!!(x), 1)        &#x2F;&#x2F; 表示x的值为真的可能性更大#define unlikely(x)  __builtin_expect(!!(x), 0)        &#x2F;&#x2F; 表示x的值为假的可能性更大<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也就是说，使用 likely() 后执行 if 后面的代码机会更大，使用 unlikely 后执行 else 后面的代码机会更大。</p><p>我们可以客观分析一下 if 语句的条件是否是经常成立的，如果这个条件确实是经常成立，或者是不成立，那么就可以使用这两个宏定义来提高程序运行的效率。</p><p>__builtin_expect 是 gcc 的内建宏，可以直接用，不加头文件。</p><p>参考下面两段代码：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main() &#123;    int x &#x3D; 0;    for (int i &#x3D; 0; ; i++) &#123;        if (x &lt; 200000000) x++;        else &#123;            break;        &#125;    &#125;    printf(&quot;OK\n&quot;);    return 0;&#125;运行结果：$ time .&#x2F;mytestOK.&#x2F;mytest  0.72s user 0.00s system 99% cpu 0.725 total<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main() &#123;    int x &#x3D; 0;    for (int i &#x3D; 0; ; i++) &#123;        if (__builtin_expect(!!(x &lt; 200000000), 1)) &#123;            x++;        &#125; else &#123;            break;        &#125;    &#125;    printf(&quot;OK\n&quot;);    return 0;&#125;运行结果：    $ time .&#x2F;mytestOK.&#x2F;mytest  0.59s user 0.00s system 99% cpu 0.597 total<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言编程技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/29/hello-world/"/>
      <url>2021/01/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3><span id="run-server">Run server</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3><span id="generate-static-files">Generate static files</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
