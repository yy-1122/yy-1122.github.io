<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>归并排序</title>
      <link href="2021/02/12/gui-bing-pai-xu/"/>
      <url>2021/02/12/gui-bing-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1><span id="归并排序">归并排序</span></h1><h2><span id="一-原理">一、原理</span></h2><p>归并排序（MERGE-SORT）是利用<strong>归并</strong>的思想实现的排序方法，该算法采用经典的<strong>分治</strong>（divide-and-conquer）策略（分治法将问题<strong>分</strong>(divide)成一些小的问题然后递归求解，而**治(conquer)**的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。</p><p><img src="https://i.loli.net/2021/02/12/3pAltQLoX1qZzRm.png"></p><p>可以看到这种结构很像一棵完全二叉树。<strong>分</strong>阶段可以理解为就是递归拆分子序列的过程，递归深度为log2n。</p><p><strong>治</strong>阶段，我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将[4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]，如下图。</p><p><img src="https://i.loli.net/2021/02/12/epkNMSJxGgnWrvs.png"></p><p><img src="https://i.loli.net/2021/02/12/sJkPfOYtXWEyGj3.png"></p><h2><span id="二-代码">二、代码</span></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span>                                                                                                                 </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span>                                                                                                                </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span>                                                                                                                </span>                                                                                                                                  <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                                                                    a <span class="token operator">^=</span> b<span class="token punctuation">;</span>                                                                                                                           b <span class="token operator">^=</span> a<span class="token punctuation">;</span>                                                                                                                           a <span class="token operator">^=</span> b<span class="token punctuation">;</span>                                                                                                                       <span class="token punctuation">&#125;</span>                                                                                                                                                                                                                                                                   <span class="token keyword">void</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                                                              <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                                                                                     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                                                                <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                                         <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p1 <span class="token operator">=</span> l<span class="token punctuation">,</span> p2 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid <span class="token operator">||</span> p2 <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">></span> r <span class="token operator">||</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>arr <span class="token operator">+</span> l<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i <span class="token operator">&amp;&amp;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out<span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="2021/02/12/mou-pao-pai-xu/"/>
      <url>2021/02/12/mou-pao-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1><span id="冒泡排序">冒泡排序</span></h1><h2><span id="一-原理">一、原理</span></h2><p>1、将数组分成 已排序区 和 待排序区， 已排序区 在后，待排序区 在前。</p><p>2、从头到尾扫描 待排序区 ，若前面元素比后面元素大，则交换。到达末尾时，此时 待排序区 的最后一个元素即选出来的最大元素，插入到 已排序区 首位。</p><p>4、循环，直到 待排序区 没有元素为止</p><p>例：</p><p>交换 4 和 5</p><p><img src="https://i.loli.net/2021/02/12/ErBgZYs37hGMyAo.jpg"></p><p><img src="https://i.loli.net/2021/02/12/W3vJiKPB8VOXA9U.jpg"></p><p>7 到达 待排序区 末尾</p><p><img src="https://i.loli.net/2021/02/12/MjB3k2zshnKcx5R.jpg"></p><p>7 插入到 已排序区 首位</p><p><img src="https://i.loli.net/2021/02/12/LUbmsRZTrvxN7t2.jpg"></p><h2><span id="二-代码">二、代码</span></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">^=</span> b<span class="token punctuation">;</span>    b <span class="token operator">^=</span> a<span class="token punctuation">;</span>    a <span class="token operator">^=</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> times<span class="token punctuation">;</span> <span class="token comment">//记录本轮扫描是否有交换，若无交换则序列已经完成排序，可退出循环</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            times<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">BubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i <span class="token operator">&amp;&amp;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out<span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插入排序</title>
      <link href="2021/02/12/cha-ru-pai-xu/"/>
      <url>2021/02/12/cha-ru-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1><span id="插入排序">插入排序</span></h1><h2><span id="一-原理">一、原理</span></h2><p>1、将数组中的元素分为 已排序区 和 待排序区 ，已排序区 在前，待排序区 在后。</p><p>2、将 待排序区 第一个元素插入到 已排序区 末尾，与前一个元素比较，如果比前面的元素小，则交换两元素，继续比较插入元素和前一位元素，当插入元素符合排列大小或者到达首位则本次插入完成。</p><p>3、循环插入，直到 待排序区 为空。</p><p>例：将 6 从 待排序区 插入到 已排序区</p><p><img src="https://i.loli.net/2021/02/12/h9bT8rEuGvitfpP.jpg"></p><p><img src="https://i.loli.net/2021/02/12/TgwzZRUH4au6OXL.jpg"></p><h2><span id="二-代码">二、代码</span></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">^=</span> b<span class="token punctuation">;</span>    b <span class="token operator">^=</span> a<span class="token punctuation">;</span>    a <span class="token operator">^=</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">InsertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i <span class="token operator">&amp;&amp;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out<span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元测试框架</title>
      <link href="2021/02/11/shi-xian-jian-yi-de-dan-yuan-ce-shi-kuang-jia/"/>
      <url>2021/02/11/shi-xian-jian-yi-de-dan-yuan-ce-shi-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1><span id="实现简易的单元测试框架">实现简易的单元测试框架</span></h1><h2><span id="文件目录结构">文件目录结构</span></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ tree           <span class="token punctuation">.</span>├── bin│   └── test├── build│   ├── main<span class="token punctuation">.</span>o│   └── test<span class="token punctuation">.</span>o├── include│   ├── linklist<span class="token punctuation">.</span>h│   └── test<span class="token punctuation">.</span>h├── lib│   └── libtest<span class="token punctuation">.</span>a├── Makefile└── src    ├── main<span class="token punctuation">.</span>c    └── test<span class="token punctuation">.</span>c<span class="token number">5</span> directories<span class="token punctuation">,</span> <span class="token number">9</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="代码">代码</span></h2><p>总体思想：设计测试单元。建立一个测试单元结构体链表，使用__attribute__((constructor))修改测试单元属性，在进入main函数前将所有测试单元依次加入链表。进入主函数对链表中的测试单元依次进行测试。</p><p>main.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"test.h"</span></span><span class="token comment">//一组测试例</span><span class="token function">TEST</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> add0<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">EXPECT_EQ</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断言</span>    <span class="token function">EXPECT_NE</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_LE</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_LT</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">TEST</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> add1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">EXPECT_EQ</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_NE</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_GE</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_GT</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//开始测试</span>    <span class="token keyword">return</span> <span class="token function">RUN_ALL_TESTS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test.h</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__test_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__test_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"linklist.h"</span></span><span class="token comment">//添加输出字体颜色</span><span class="token comment">// C语言中连续两个字符串可连接成一个字符串 “abc” "def" == "abcdef"</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">COLOR</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">,</span> color<span class="token punctuation">)</span> </span><span class="token string">"\033["</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">color</span> </span></span><span class="token string">"m"</span> <span class="token expression">str </span><span class="token string">"\033[0m"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">COLOR_HL</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">,</span> color<span class="token punctuation">)</span> </span><span class="token string">"\033[1;"</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">color</span> </span></span><span class="token string">"m"</span> <span class="token expression">str </span><span class="token string">"\033[0m"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">RED</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token function">COLOR</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GREEN</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token function">COLOR</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">YELLOW</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token function">COLOR</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BLUE</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token function">COLOR</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">RED_HL</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token function">COLOR_HL</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GREEN_HL</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token function">COLOR_HL</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">YELLOW_HL</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token function">COLOR_HL</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BLUE_HL</span><span class="token expression"><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token function">COLOR_HL</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span></span></span><span class="token comment">//测试宏</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TEST</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">void</span> a</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">/*使下一函数优先于main函数被执行*/</span> <span class="token punctuation">\</span><span class="token expression"><span class="token keyword">void</span> add_</span><span class="token punctuation">##</span><span class="token expression">a</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">add_function</span><span class="token punctuation">(</span>a</span><span class="token punctuation">##</span><span class="token expression">b<span class="token punctuation">,</span> #a </span><span class="token string">"."</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">b</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span><span class="token comment">/*添加测试组函数到链表*/</span> <span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">void</span> a</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TYPE</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">_Generic</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token comment">/*_Generic c11泛型关键字 将相应类型替换为格式控制字符串*/</span> <span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">int</span> <span class="token operator">:</span> </span><span class="token string">"%d"</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">float</span> <span class="token operator">:</span> </span><span class="token string">"f"</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">double</span> <span class="token operator">:</span> </span><span class="token string">"lf"</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">:</span> </span><span class="token string">"lld"</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token operator">:</span> </span><span class="token string">"%s"</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token operator">:</span> </span><span class="token string">"%s"</span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token comment">//打印字符串</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">P</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">char</span> frm<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">sprintf</span><span class="token punctuation">(</span>frm<span class="token punctuation">,</span> <span class="token function">color</span><span class="token punctuation">(</span></span><span class="token string">"%s"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TYPE</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>frm<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span></span></span><span class="token comment">//断言 根据 cmp 比较 a 和 b 的值</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EXPECT</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">__typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> _a <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">__typeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> _b <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression">test_info<span class="token punctuation">.</span>total<span class="token operator">++</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>_a cmp _b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>test_info<span class="token punctuation">.</span>success<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">else</span> <span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">YELLOW_HL</span><span class="token punctuation">(</span></span><span class="token string">"\t%s:%d: failure\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token comment">/*输出错误点信息*/</span><span class="token punctuation">\</span>        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">YELLOW_HL</span><span class="token punctuation">(</span></span><span class="token string">"\t\texpect : "</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">a</span> </span></span><span class="token string">" "</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">cmp</span> </span></span><span class="token string">" "</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">b</span><span class="token expression"><span class="token punctuation">)</span> </span></span></span><span class="token string">"\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">YELLOW_HL</span><span class="token punctuation">(</span></span><span class="token string">"\t\tactual : "</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>        <span class="token expression"><span class="token function">P</span><span class="token punctuation">(</span>_a<span class="token punctuation">,</span>YELLOW_HL<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">YELLOW_HL</span><span class="token punctuation">(</span></span><span class="token string">" vs "</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>        <span class="token expression"><span class="token function">P</span><span class="token punctuation">(</span>_b<span class="token punctuation">,</span>YELLOW_HL<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>        <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\r\n\r\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token punctuation">&#125;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">GREEN_HL</span><span class="token punctuation">(</span></span><span class="token string">"[-----------] "</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>#a </span><span class="token string">" "</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">cmp</span> </span></span><span class="token string">" "</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">b</span> </span></span><span class="token string">" %s\r\n"</span><span class="token expression"><span class="token punctuation">,</span>_a cmp _b <span class="token operator">?</span> <span class="token function">GREEN</span><span class="token punctuation">(</span></span><span class="token string">"True"</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">RED</span><span class="token punctuation">(</span></span><span class="token string">"False"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EXPECT_EQ</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">EXPECT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">==</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EXPECT_NE</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">EXPECT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">!=</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EXPECT_LE</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">EXPECT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&lt;=</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EXPECT_LT</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">EXPECT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EXPECT_GE</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">EXPECT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">>=</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EXPECT_GT</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">EXPECT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">></span><span class="token punctuation">)</span></span></span><span class="token comment">//测试组函数指针类型</span><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>FunctestT<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//测试组函数结构体</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Function</span><span class="token punctuation">&#123;</span>    FunctestT func<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>    LinkNode p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Function<span class="token punctuation">;</span><span class="token comment">//测试信息结构体</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">FunctionInfo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> total<span class="token punctuation">,</span> success<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>FunctionInfo<span class="token punctuation">;</span><span class="token keyword">extern</span> FunctionInfo test_info<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">RUN_ALL_TESTS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add_function</span><span class="token punctuation">(</span>FunctestT<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// __test_H__</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>linklist.h</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__linklist_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__linklist_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">offset</span><span class="token expression"><span class="token punctuation">(</span>T<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token comment">//结构体元素偏移量</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HEAD</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">,</span> T<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">(</span>T <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">offset</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token comment">//移动指针到结构体首地址</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>LinkNode<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// __linklist_H__</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"test.h"</span></span><span class="token keyword">int</span> func_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//测试组函数个数</span>Function func_head<span class="token punctuation">,</span> <span class="token operator">*</span>func_tail <span class="token operator">=</span> <span class="token operator">&amp;</span>func_head<span class="token punctuation">;</span><span class="token comment">//头结点 和 尾节点指针</span>FunctionInfo test_info<span class="token punctuation">;</span><span class="token comment">//测试节点信息</span><span class="token keyword">int</span> <span class="token function">RUN_ALL_TESTS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>LinkNode <span class="token operator">*</span>p <span class="token operator">=</span> func_head<span class="token punctuation">.</span>p<span class="token punctuation">.</span>next<span class="token punctuation">;</span> p<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Function <span class="token operator">*</span>func <span class="token operator">=</span> <span class="token function">HEAD</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> Function<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//移动指针到结构体首地址</span>        test_info<span class="token punctuation">.</span>total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> test_info<span class="token punctuation">.</span>success <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">GREEN_HL</span><span class="token punctuation">(</span><span class="token string">"[====RUN====]"</span><span class="token punctuation">)</span><span class="token function">RED_HL</span><span class="token punctuation">(</span><span class="token string">" %s\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> func<span class="token operator">-></span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        func<span class="token operator">-></span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>func<span class="token operator">-></span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        func<span class="token operator">-></span>str <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">;</span>        func <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">GREEN_HL</span><span class="token punctuation">(</span><span class="token string">"[  "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> rate <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> test_info<span class="token punctuation">.</span>success <span class="token operator">/</span> test_info<span class="token punctuation">.</span>total<span class="token punctuation">;</span> <span class="token comment">//测试通过率</span>        rate <span class="token operator">*=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>rate <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1e-6</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">BLUE_HL</span><span class="token punctuation">(</span><span class="token string">"%6.2lf%%"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">RED_HL</span><span class="token punctuation">(</span><span class="token string">"%6.2lf%%"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">GREEN_HL</span><span class="token punctuation">(</span><span class="token string">"  ] "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"total : %d success : %d \r\n"</span><span class="token punctuation">,</span> test_info<span class="token punctuation">.</span>total<span class="token punctuation">,</span>test_info<span class="token punctuation">.</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//添加测试组函数到结构体链表</span><span class="token keyword">void</span> <span class="token function">add_function</span><span class="token punctuation">(</span>FunctestT func<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Function <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Function<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token operator">-></span>func <span class="token operator">=</span> func<span class="token punctuation">;</span>    temp<span class="token operator">-></span>str <span class="token operator">=</span> <span class="token function">strdup</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    func_tail<span class="token operator">-></span>p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>temp<span class="token operator">-></span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    func_tail <span class="token operator">=</span> temp<span class="token punctuation">;</span>    func_cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>bin<span class="token operator">/</span>test<span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span>RUN<span class="token operator">==</span><span class="token operator">==</span><span class="token punctuation">]</span> test<span class="token punctuation">.</span>add0<span class="token punctuation">[</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> True<span class="token punctuation">[</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span> True<span class="token punctuation">[</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2</span> True<span class="token punctuation">[</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5</span> True<span class="token punctuation">[</span>  <span class="token number">100.00</span><span class="token operator">%</span>  <span class="token punctuation">]</span> total <span class="token operator">:</span> <span class="token number">4</span> success <span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span>RUN<span class="token operator">==</span><span class="token operator">==</span><span class="token punctuation">]</span> test<span class="token punctuation">.</span>add1<span class="token punctuation">[</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> True        <span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>main<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span> failure                expect <span class="token operator">:</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span>                actual <span class="token operator">:</span> <span class="token number">2</span> vs <span class="token number">2</span><span class="token punctuation">[</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> False<span class="token punctuation">[</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span> True        <span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>main<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span> failure                expect <span class="token operator">:</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span>                actual <span class="token operator">:</span> <span class="token number">2</span> vs <span class="token number">3</span><span class="token punctuation">[</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span> False<span class="token punctuation">[</span>   <span class="token number">50.00</span><span class="token operator">%</span>  <span class="token punctuation">]</span> total <span class="token operator">:</span> <span class="token number">4</span> success <span class="token operator">:</span> <span class="token number">2</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛顿迭代法</title>
      <link href="2021/02/10/niu-dun-die-dai-fa/"/>
      <url>2021/02/10/niu-dun-die-dai-fa/</url>
      
        <content type="html"><![CDATA[<h1><span id="一-原理">一、原理</span></h1><p>牛顿迭代法是一种解决一元高次方程的算法</p><p><img src="https://i.loli.net/2021/02/10/38ZvPN5wjSr6JTq.jpg"></p><p>算法推导过程：</p><p>通过不断迭代直到（x<em>，0）处，求得x\</em>的近似值</p><p>对于点（x0，f(x0)）迭代到（x1, 0）,</p><p>（x0， f(x0)）的两点式切线方程为：</p><p>0 - f(x0) = f’(x0)(x1 - x0)</p><p>可得迭代式：x1 = x0 - f(x0) / f’(x0)</p><h1><span id="二-代码">二、代码</span></h1><p>求 f(x) = x^2 的根</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span>                                                                                                           </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span>                                                                                                            </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EPSL</span> <span class="token expression"><span class="token number">1e-7</span>                                                                                                           </span></span><span class="token keyword">double</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> x <span class="token operator">-</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">NewTon</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span>F<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">double</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> x <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span><span class="token function">F</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> EPSL<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">-=</span> <span class="token function">F</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">MySqrt</span><span class="token punctuation">(</span><span class="token keyword">double</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">NewTon</span><span class="token punctuation">(</span>F<span class="token punctuation">,</span> f<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> n<span class="token punctuation">,</span> ans<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x^2 = %lf\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    ans <span class="token operator">=</span> <span class="token function">MySqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = %lf\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="运行结果">运行结果：</span></h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out<span class="token number">4</span>x<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">4.000000</span>x <span class="token operator">=</span> <span class="token number">2.000000</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out<span class="token number">5</span>x<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">5.000000</span>x <span class="token operator">=</span> <span class="token number">2.236068</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛顿迭代法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>素数筛</title>
      <link href="2021/02/10/su-shu-shai/"/>
      <url>2021/02/10/su-shu-shai/</url>
      
        <content type="html"><![CDATA[<h1><span id="素数筛">素数筛</span></h1><h2><span id="一-原理">一、原理</span></h2><p>1、标记一个范围内的数字是否是合数，没有被标记的则为素数</p><p>2、算法的空间复杂度为O(N)，时间复杂度为O(N * loglogN)</p><p>3、总体思想是用素数去标记掉不是素数的数字，例如我知道了i是素数，那么2*i、3*i、4*i……就都不是素数</p><h2><span id="二-代码实现">二、代码实现</span></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_N</span> <span class="token expression"><span class="token number">10000</span></span></span><span class="token keyword">int</span> prime<span class="token punctuation">[</span>MAX_N <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> MAX_N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        prime<span class="token punctuation">[</span><span class="token operator">++</span>prime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token comment">//j 从 i * i 开始向后标记</span>        <span class="token comment">//在 i * i 之前的合数则已经被 i 之前的素数标记了</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> MAX_N<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> prime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="运行结果">运行结果：</span></h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out  <span class="token number">2</span><span class="token number">3</span><span class="token number">5</span><span class="token number">7</span><span class="token number">11</span><span class="token number">13</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 素数筛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性筛</title>
      <link href="2021/02/10/xian-xing-shai/"/>
      <url>2021/02/10/xian-xing-shai/</url>
      
        <content type="html"><![CDATA[<h1><span id="线性筛">线性筛</span></h1><h2><span id="一-原理">一、原理</span></h2><p>1、标记一个范围内的数字是否是合数，没有被标记的则为素数</p><p>2、算法的空间复杂度为O(N)，时间复杂度为O(N)</p><p>3、总体思想是用一个整数M去标记合数N，其中N和M具有如下性质<br>1）N中最小的素数为p<br>2）N =  p * M<br>3）p一定小于等于M中最小的素因子<br>4）利用M * P(所有不大于M中最小素数的集合）标记N1、N2、N3 …..</p><h2><span id="二-代码">二、代码</span></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_N</span> <span class="token expression"><span class="token number">10000</span></span></span><span class="token keyword">int</span> prime<span class="token punctuation">[</span>MAX_N <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> MAX_N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> prime<span class="token punctuation">[</span><span class="token operator">++</span>prime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> prime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> MAX_N<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment">//确定i，不断遍历已有素数表中的素数来标记合数</span>            prime<span class="token punctuation">[</span>i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">//如果 prime[j] 已经是 i 的最小素因子了，则跳出循环</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> prime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性筛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变参函数和变参宏定义</title>
      <link href="2021/02/09/ke-bian-can-shu-han-shu/"/>
      <url>2021/02/09/ke-bian-can-shu-han-shu/</url>
      
        <content type="html"><![CDATA[<h2><span id="一-变参函数介绍">一、变参函数介绍</span></h2><p>C 语言允许定义参数数量可变的函数，这称为可变参数函数（variadic function）。这种函数需要固定数量的强制参数（mandatory argument），后面是数量可变的可选参数（optional argument）。</p><p>可变参数函数要获取可选参数时，必须通过一个类型为 va_list 的对象，它包含了参数信息。这种类型的对象也称为参数指针（argument pointer），它包含了栈中至少一个参数的位置。可以使用这个参数指针从一个可选参数移动到下一个可选参数，由此，函数就可以获取所有的可选参数。va_list 类型被定义在头文件 stdarg.h 中。</p><h2><span id="二-使用方法">二、使用方法</span></h2><ul><li>定义一个函数，最后一个参数为省略号，省略号前面可以设置自定义参数。</li><li>在函数定义中创建一个 <strong>va_list</strong> 类型变量，该类型是在 stdarg.h 头文件中定义的。</li><li>使用 固定参数和 <strong>va_start</strong> 宏来初始化 <strong>va_list</strong> 变量为一个参数列表。宏 va_start 是在 stdarg.h 头文件中定义的。</li><li>使用 <strong>va_arg</strong> 宏和 <strong>va_list</strong> 变量来访问参数列表中的每个项。</li><li>使用宏 <strong>va_end</strong> 来清理赋予 <strong>va_list</strong> 变量的内存。</li></ul><h4><span id="代码演示">代码演示</span></h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdint></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;inttypes.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span></span><span class="token keyword">int</span> <span class="token function">IntMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> INT32_MIN<span class="token punctuation">;</span>    va_list arg<span class="token punctuation">;</span>    <span class="token function">va_start</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">&lt;</span> temp<span class="token punctuation">)</span> ans <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">va_end</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max = %d\n"</span><span class="token punctuation">,</span> <span class="token function">IntMax</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max = %d\n"</span><span class="token punctuation">,</span><span class="token function">IntMax</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max = %d\n"</span><span class="token punctuation">,</span><span class="token function">IntMax</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="运行结果">运行结果：</span></h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>outmax <span class="token operator">=</span> <span class="token number">3</span>max <span class="token operator">=</span> <span class="token number">5</span>max <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="三-变参宏定义">三、变参宏定义</span></h2><p>C99中规定宏可以像函数一样带有可变参数，比如</p><pre class="line-numbers language-none"><code class="language-none">#define LOG(format, ...) fprintf(stdout, format, __VA_ARGS__)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，…表示参数可变，__VA_ARGS__在预处理中为实际的参数集所替换</p><p>GCC中同时支持如下的形式</p><pre class="line-numbers language-none"><code class="language-none">#define LOG(format, args...) fprintf(stdout, format, args)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其用法和上面的基本一致，只是参数符号有变化</p><p><strong>可变参数的宏里的‘##’操作说明</strong> </p><p>GNU CPP还有两种更复杂的宏扩展，支持上面两种格式的定义格式。</p><p>在标准C里，你不能省略可变参数，但是你却可以给它传递一个空的参数。例如，下面的宏调用在ISO C里是非法的，因为字符串后面没有逗号：</p><p>debug (“A message”)</p><p>GNU CPP在这种情况下可以让你完全的忽略可变参数。在上面的例子中，编译器仍然会有问题（complain），因为宏展开后，里面的字符串后面会有个多余的逗号。</p><p>为了解决这个问题，CPP使用一个特殊的‘##’操作。书写格式为：</p><p>#define debug(format, …) fprintf (stderr, format, ## __VA_ARGS__)</p><p>这里，如果可变参数被忽略或为空，‘##’操作将使预处理器（preprocessor）去除掉它前面的那个逗号。如果你在宏调用时，确实提供了一些可变参数，GNU CPP也会工作正常，它会把这些可变参数放到逗号的后面。象其它的pasted macro参数一样，这些参数不是宏的扩展。</p><h4><span id="代码演示">代码演示：</span></h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdint></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;inttypes.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOG</span><span class="token expression"><span class="token punctuation">(</span>frm<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>frm<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">args<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"LOG1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"LOG2: %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"LOG3: %d, %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOG</span><span class="token punctuation">(</span><span class="token string">"LOG4: %d, %d, %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="运行结果">运行结果：</span></h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>outLOG1LOG2<span class="token operator">:</span> <span class="token number">1</span>LOG3<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>LOG4<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
            <tag> 宏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧几里得和扩展欧几里得算法</title>
      <link href="2021/02/09/ou-ji-li-de-suan-fa/"/>
      <url>2021/02/09/ou-ji-li-de-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1><span id="一-欧几里得算法">一、欧几里得算法</span></h1><p>简介：辗转相除法， 又名<a href="https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%B7%E7%AE%97%E6%B3%95/9002848">欧几里德算法</a>（Euclidean algorithm），是求最大公约数的一种方法。它的具体做法是：用较大数除以较小数，再用出现的余数（第一余数）去除除数，再用出现的余数（第二余数）去除第一余数，如此反复，直到最后余数是0为止。如果是求两个数的最大公约数，那么最后的除数就是这两个数的最大公约数。</p><p>另一种求两数的最大公约数的方法是<a href="https://baike.baidu.com/item/%E6%9B%B4%E7%9B%B8%E5%87%8F%E6%8D%9F%E6%B3%95/10277459">更相减损法</a>。</p><h3><span id="辗转相除法举例">辗转相除法举例：</span></h3><p>求 10 ，25的最大公约数：<br>25 / 10 = 2 ······5<br>10 / 5  = 2 ······0<br>所以10，25的最大公约数为5</p><h3><span id="原理">原理：</span></h3><p><img src="https://i.loli.net/2021/02/09/UltH8sr1E5LGjzY.jpg"></p><p><img src="https://i.loli.net/2021/02/09/YomK46dHDvLgihq.jpg"></p><h3><span id="代码实现">代码实现：</span></h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;cstdio&gt;int gcd(int a, int b) &#123;    if (b &#x3D;&#x3D; 0) return a;    return gcd(b, a % b);&#125;int main() &#123;    int a, b;    scanf(&quot;%d%d&quot;, &amp;a, &amp;b);    int ans &#x3D; gcd(a, b);    printf(&quot;%d\n&quot;, ans);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="运行结果">运行结果：</span></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out<span class="token number">25</span> <span class="token number">10</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1><span id="二-扩展欧几里得算法">二、扩展欧几里得算法</span></h1><h3><span id="原理">原理：</span></h3><p><strong>贝祖定理</strong>：如果a、b是整数，那么一定存在整数 x、y 使得 ax+by=gcd(a,b)。</p><p><strong>扩展欧几里得</strong>：</p><p>​    当到达递归边界的时候，b=0，a=gcd(a,b) 这时可以观察出来这个式子的一个解：a*1+b*0=gcd(a,b)，x=1,y=0，注意这时的a和b已经不是最开始的那个a和b了，所以我们如果想要求出解x和y，就要回到最开始的模样。</p><p>   假设当前我们在求a和b的最大公约数，而我们已经求出了下一个状态：b和a%b的最大公因数，并且求出了一组x1和y1使得             b*x1+(a%b)*y1=gcd</p><p>（注意在递归算法中，永远都是先得到下面一个状态的值）</p><p>这时我们可以试着去寻找这两个相邻状态的关系：</p><p>首先我们知道：a%b=a-(a/b)*b；带入：</p><p>b*x1 + (a-(a/b)*b)*y1</p><p>= b*x1 + a*y1 – (a/b)<em>b</em>y1</p><p>= a*y1 + b*(x1 – a/b*y1) = gcd  </p><p>此时我们发现如果要使上一层等式 ax+by=gcd 成立，则需要 x = y1 , y = x1 – a/b*y1</p><p>这样我们就得到了每两个相邻状态的x和y的转化，就可以在求gcd的同时对x和y进行求值了</p><h3><span id="代码实现">代码实现：</span></h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;cstdio&gt;int ex_gcd(int a, int b, int *x, int *y) &#123;    if (b &#x3D;&#x3D; 0) &#123;        *x &#x3D; 1;        *y &#x3D; 0;        return a;    &#125;    int xx, yy, ret &#x3D; ex_gcd(b, a % b, &amp;xx, &amp;yy);    *x &#x3D; yy;    *y &#x3D; xx - a &#x2F; b * yy;    return ret;&#125;int main() &#123;    int a, b, x, y;    scanf(&quot;%d%d&quot;, &amp;a, &amp;b);    printf(&quot;gcd(%d, %d) &#x3D; %d\n&quot;, a, b, ex_gcd(a, b, &amp;x, &amp;y));    printf(&quot;%d * %d + %d * %d &#x3D; %d\n&quot;, a, x, b, y, a * x + b * y);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="运行结果">运行结果：</span></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out<span class="token number">25</span> <span class="token number">10</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token number">25</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令</title>
      <link href="2021/01/29/linux-ming-ling/"/>
      <url>2021/01/29/linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>关于Linux系统一些常用命令的简介</p><p><img src="https://i.loli.net/2021/01/24/AUmbSC7N6HyJ2WX.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPU分支预测</title>
      <link href="2021/01/29/fen-zhi-yu-ce/"/>
      <url>2021/01/29/fen-zhi-yu-ce/</url>
      
        <content type="html"><![CDATA[<h1><span id="一-什么是cpu分支预测">一、什么是CPU分支预测</span></h1><p>CPU 在遇到 if 分支结构发语句时是怎么处理的呢？</p><p>我们想象一下，假如你遇到了一个分叉路口，而此时你并不知道目的地在哪个方向，你会怎么做呢？</p><p>很显然，你只能随机选择一条路继续前进，如果你猜对了，那么恭喜你。但是如果你猜错了呢，毫无疑问，你只能沿路返回路口，再选择另一条路，CPU在遇到 if 语句是也是如此。</p><p><img src="https://i.loli.net/2021/01/29/GdwKUNnMhIAB47b.jpg"></p><p>如果CPU总是猜错，那么程序的执行效率明显会有所降低，那有没有一种办法能够提高CPU猜中的可能性呢？</p><p>这就是 if 语句的分支预测。</p><h1><span id="二-分支预测的使用">二、分支预测的使用</span></h1><p>Linux系统中，定义了两个宏，在linux/compiler中，如下。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define likely(x)    __builtin_expect(!!(x), 1)        &#x2F;&#x2F; 表示x的值为真的可能性更大#define unlikely(x)  __builtin_expect(!!(x), 0)        &#x2F;&#x2F; 表示x的值为假的可能性更大<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也就是说，使用 likely() 后执行 if 后面的代码机会更大，使用 unlikely 后执行 else 后面的代码机会更大。</p><p>我们可以客观分析一下 if 语句的条件是否是经常成立的，如果这个条件确实是经常成立，或者是不成立，那么就可以使用这两个宏定义来提高程序运行的效率。</p><p>__builtin_expect 是 gcc 的内建宏，可以直接用，不加头文件。</p><p>参考下面两段代码：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main() &#123;    int x &#x3D; 0;    for (int i &#x3D; 0; ; i++) &#123;        if (x &lt; 200000000) x++;        else &#123;            break;        &#125;    &#125;    printf(&quot;OK\n&quot;);    return 0;&#125;运行结果：$ time .&#x2F;mytestOK.&#x2F;mytest  0.72s user 0.00s system 99% cpu 0.725 total<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main() &#123;    int x &#x3D; 0;    for (int i &#x3D; 0; ; i++) &#123;        if (__builtin_expect(!!(x &lt; 200000000), 1)) &#123;            x++;        &#125; else &#123;            break;        &#125;    &#125;    printf(&quot;OK\n&quot;);    return 0;&#125;运行结果：    $ time .&#x2F;mytestOK.&#x2F;mytest  0.59s user 0.00s system 99% cpu 0.597 total<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言编程技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/29/hello-world/"/>
      <url>2021/01/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3><span id="run-server">Run server</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3><span id="generate-static-files">Generate static files</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
